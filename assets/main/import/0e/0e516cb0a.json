[1,["baIUdvKGZPgZxNbjWTFuRI","6eT4zyj2JGl5Mzqetq4Y5J@b4e6b","63uVNgBdlGB73S6mSHB0dP","09Xs/f4HlJtLVrXfsFETli@b4e6b","f6SJZOjTJB/JrJeh5xTdF7","54nd9oV+NGYp4ib5JxF6Wo@53497","54nd9oV+NGYp4ib5JxF6Wo@b7d4a","ad6KFa3MpLPITG9kdqyHW7","07yNCrZvFKVb48uiM7mVk9@f9941","8d4SStNg9HLLocoMhbxOYZ@f9941","09Xs/f4HlJtLVrXfsFETli@27448","eadHiwQI1AUrcD8NI1Xglf","b5snqx50BDmLQHhI/CssiX@6c48a","67uZkZc5JGprAo9Nhh1wrX@f9941","20g1ukYUVPvKWKBRznAKo+@f9941","54TknWPwVPqJqeCR+Y/Czo@f9941","95EkngnxZFbYuFpsqVTaFr@f9941","0fmUARa59BR7ABZcDG1y42@f9941","48Y+mIVPFKZY7Q5FYC6net","07yNCrZvFKVb48uiM7mVk9@6c48a","09Xs/f4HlJtLVrXfsFETli@39e1f","09Xs/f4HlJtLVrXfsFETli@438fe","09Xs/f4HlJtLVrXfsFETli@f39b2","09Xs/f4HlJtLVrXfsFETli@dd8f2","09Xs/f4HlJtLVrXfsFETli@7d6ab","0fmUARa59BR7ABZcDG1y42@6c48a","1ex7mvUS1LDaYoMoDtUUa1@6c48a","20g1ukYUVPvKWKBRznAKo+@6c48a","46ASc3AyhFF7hUHo//INlL@6c48a","47LezYxn5PCJBcpyUkpkXc@6c48a","54TknWPwVPqJqeCR+Y/Czo@6c48a","54nd9oV+NGYp4ib5JxF6Wo@0a1ef","54nd9oV+NGYp4ib5JxF6Wo@05da8","8eFQuAeBlJjIFKW3LYZLGd@b4e6b","8eFQuAeBlJjIFKW3LYZLGd@a4587","67uZkZc5JGprAo9Nhh1wrX@6c48a","6aQzx0xJtOM7wfMFMjhjWB@6c48a","6eT4zyj2JGl5Mzqetq4Y5J@7d6ab","83h8+HREFLWJPOUDQS0aLp@6c48a","88BlX7QadCQJSPf6d/c4V5@6c48a","8d4SStNg9HLLocoMhbxOYZ@6c48a","8eFQuAeBlJjIFKW3LYZLGd@7d6ab","95EkngnxZFbYuFpsqVTaFr@6c48a","54nd9oV+NGYp4ib5JxF6Wo@20fc1","54nd9oV+NGYp4ib5JxF6Wo@8bccd","54nd9oV+NGYp4ib5JxF6Wo@592cf","54nd9oV+NGYp4ib5JxF6Wo@a8010","54nd9oV+NGYp4ib5JxF6Wo@444de","54nd9oV+NGYp4ib5JxF6Wo@85741","54nd9oV+NGYp4ib5JxF6Wo@f7f2b","54nd9oV+NGYp4ib5JxF6Wo@7a2b6","54nd9oV+NGYp4ib5JxF6Wo@ae517","54nd9oV+NGYp4ib5JxF6Wo@65ad2","09Xs/f4HlJtLVrXfsFETli@1e9c3","83h8+HREFLWJPOUDQS0aLp@f9941","6aQzx0xJtOM7wfMFMjhjWB@f9941","88BlX7QadCQJSPf6d/c4V5@f9941","47LezYxn5PCJBcpyUkpkXc@f9941","1ex7mvUS1LDaYoMoDtUUa1@f9941","46ASc3AyhFF7hUHo//INlL@f9941","6eT4zyj2JGl5Mzqetq4Y5J@2e9a4","6eT4zyj2JGl5Mzqetq4Y5J@a8d73","6eT4zyj2JGl5Mzqetq4Y5J@280fb","6eT4zyj2JGl5Mzqetq4Y5J@23d54","6eT4zyj2JGl5Mzqetq4Y5J@d33b5","6eT4zyj2JGl5Mzqetq4Y5J@9c990","6eT4zyj2JGl5Mzqetq4Y5J@d293f","6eT4zyj2JGl5Mzqetq4Y5J@c2c61","6eT4zyj2JGl5Mzqetq4Y5J@822ba","6eT4zyj2JGl5Mzqetq4Y5J@ea49c","6eT4zyj2JGl5Mzqetq4Y5J@73337","6eT4zyj2JGl5Mzqetq4Y5J@4ea01","6eT4zyj2JGl5Mzqetq4Y5J@6bf16","6eT4zyj2JGl5Mzqetq4Y5J@69165","6eT4zyj2JGl5Mzqetq4Y5J@d6b3f","6eT4zyj2JGl5Mzqetq4Y5J@80e61","6eT4zyj2JGl5Mzqetq4Y5J@93735","6eT4zyj2JGl5Mzqetq4Y5J@40189","6eT4zyj2JGl5Mzqetq4Y5J@6c56c","6eT4zyj2JGl5Mzqetq4Y5J@54ccb","6eT4zyj2JGl5Mzqetq4Y5J@a8165","6eT4zyj2JGl5Mzqetq4Y5J@ac3e5","6eT4zyj2JGl5Mzqetq4Y5J@3e56e","6eT4zyj2JGl5Mzqetq4Y5J@d482b","6eT4zyj2JGl5Mzqetq4Y5J@3a858","6eT4zyj2JGl5Mzqetq4Y5J@2dcb0","6eT4zyj2JGl5Mzqetq4Y5J@1d653","6eT4zyj2JGl5Mzqetq4Y5J@0344e","6eT4zyj2JGl5Mzqetq4Y5J@18907","6eT4zyj2JGl5Mzqetq4Y5J@3812e","6eT4zyj2JGl5Mzqetq4Y5J@b2c37","6eT4zyj2JGl5Mzqetq4Y5J@b3886","6eT4zyj2JGl5Mzqetq4Y5J@b608f","6eT4zyj2JGl5Mzqetq4Y5J@87c9a","6eT4zyj2JGl5Mzqetq4Y5J@595e7","6eT4zyj2JGl5Mzqetq4Y5J@7d2a5","6eT4zyj2JGl5Mzqetq4Y5J@32996","6eT4zyj2JGl5Mzqetq4Y5J@6bca3","6eT4zyj2JGl5Mzqetq4Y5J@1df3b","6eT4zyj2JGl5Mzqetq4Y5J@6fdb7","6eT4zyj2JGl5Mzqetq4Y5J@13319","6eT4zyj2JGl5Mzqetq4Y5J@ee479","6eT4zyj2JGl5Mzqetq4Y5J@cc955","6eT4zyj2JGl5Mzqetq4Y5J@8d2a3","6eT4zyj2JGl5Mzqetq4Y5J@77243","6eT4zyj2JGl5Mzqetq4Y5J@a86bd","6eT4zyj2JGl5Mzqetq4Y5J@8bae0","6eT4zyj2JGl5Mzqetq4Y5J@78d0d","6eT4zyj2JGl5Mzqetq4Y5J@c3a13","6eT4zyj2JGl5Mzqetq4Y5J@0a4c0","6eT4zyj2JGl5Mzqetq4Y5J@f90d2","6eT4zyj2JGl5Mzqetq4Y5J@5e7b0","6eT4zyj2JGl5Mzqetq4Y5J@fc108","6eT4zyj2JGl5Mzqetq4Y5J@80929","6eT4zyj2JGl5Mzqetq4Y5J@9d828","6eT4zyj2JGl5Mzqetq4Y5J@ca972","6eT4zyj2JGl5Mzqetq4Y5J@46409","6eT4zyj2JGl5Mzqetq4Y5J@a676f","6eT4zyj2JGl5Mzqetq4Y5J@cf560","6eT4zyj2JGl5Mzqetq4Y5J@b4b5f","6eT4zyj2JGl5Mzqetq4Y5J@b61ba","6eT4zyj2JGl5Mzqetq4Y5J@e8591","6eT4zyj2JGl5Mzqetq4Y5J@6cef6","d0MqyYBeFAkIi762QNy1/B@b47c0","f8tlOZ4L1Im4U7+C/g5ncv@b47c0","6e8d7+eZdHeps1wYhZ/4Bm","d1NGQ2rJZCcbhjH0/erZWw"],["node","_mesh","_material","_parent","root","asset","_spriteFrame","_textureSource","_effectAsset","mainTexture","_normalSprite","data","_defaultClip","_target","_hoverSprite","_pressedSprite","_disabledSprite","_skeleton","_cameraComponent","target","retryButton","cross","bodyCollider","handleCpmponent","particle","_particleSystem","scene","hadleTransform","tutorHandAnimation","_cpuMaterial","_mainTexture","_envmapHDR","_envmapLDR"],[["cc.Node",["_name","_id","_layer","_objFlags","__editorExtras__","_lpos","_parent","_children","_components","_prefab","_lrot","_euler","_lscale"],-2,5,1,2,9,4,5,5,5],"cc.SpriteFrame","cc.ImageAsset",["cc.RigidBody",["_type","_enabled","_useGravity","node","_linearFactor","_angularFactor","__prefab"],0,1,5,5,4],["cc.Widget",["_alignFlags","_top","_bottom","_right","_left","_originalWidth","_originalHeight","node"],-4,1],["cc.Sprite",["_sizeMode","_type","node","_spriteFrame","_color"],1,1,6,5],["cc.Node",["_name","_layer","_parent","_lpos","_children","_prefab","_components","_lrot","_euler"],1,1,5,9,4,12,5,5],["cc.UITransform",["node","_contentSize","_anchorPoint"],3,1,5,5],["cc.CurveRange",["constant","mode","spline"],1,4],"cc.TextureCube",["cc.Prefab",["_name"],2],["cc.Node",["_name","_parent","_components","_lrot","_euler","_lpos"],2,1,2,5,5,5],["cc.PrefabInfo",["fileId","targetOverrides","root","asset","nestedPrefabInstanceRoots"],1,1,1,2],["cc.Material",["_name","_defines","_states","_props"],0,12],["cc.CylinderCollider",["_radius","_height","_direction","node","_material","__prefab","_center"],0,1,6,4,5],["cc.MeshRenderer",["node","_materials","lightmapSettings","_mesh","__prefab"],3,1,3,4,6,4],["cc.Button",["_transition","node","clickEvents","_normalSprite","_target","_hoverSprite","_pressedSprite","_disabledSprite"],2,1,9,6,1,6,6,6],["cc.UIOpacity",["_opacity","node"],2,1],["cc.BoxCollider",["_isTrigger","node","_size","_center","_material"],2,1,5,5,6],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides"],1,9],["cc.Camera",["_far","_clearFlags","_visibility","_projection","_priority","_orthoHeight","node","_color"],-3,1,5],["cc.GradientRange",["color"],3,5],["cc.Node",["_name","_layer","_parent","_children","_components","_lpos"],1,1,2,12,5],["cc.SkeletalAnimation",["node","__prefab","_clips","_defaultClip"],3,1,4,3,6],["cc.CompPrefabInfo",["fileId"],2],["cc.PrefabInfo",["fileId","root","instance","asset"],2,1,4,6],["cc.SkinnedMeshRenderer",["node","__prefab","_materials","lightmapSettings","_skinningRoot","_mesh","_skeleton"],3,1,4,3,4,1,6,6],["cc.ModelLightmapSettings",[],3],["cc.Mesh",["_native","_hash","_struct"],1,11],["cc.Skeleton",["_name","_hash","_joints","_bindposes"],0,12],["cc.Material",["_name","_props","_states","_defines"],-1],["23ce1XMzoJJUbKs/RT8vKUD",["node","__prefab"],3,1,4],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.SceneAsset",["_name"],2],["cc.Canvas",["node","_cameraComponent"],3,1,1],["cc.ClickEvent",["_componentId","handler","target"],1,1],["6ab233X1vFDhrFdFbuZOHQz",["node"],3,1],["70a50C18/tHWL4YgLKcDpfb",["speedCrossOpacity","speedretryScale","speedretryOpacity","node","cross","retryButton"],0,1,1,1],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree"],3,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumHDR","_skyIllumLDR","_skyColorHDR","_groundAlbedoHDR","_skyColorLDR","_groundAlbedoLDR"],1,5,5,5,5],["cc.ShadowsInfo",["_shadowColor"],3,5],["cc.SkyboxInfo",["_useHDR","_envmapHDR","_envmapLDR"],2,6,6],["cc.FogInfo",[],3],["cc.OctreeInfo",["_minPos","_maxPos"],3,5,5],["606d1Y9A/RHAprVKHwKKMth",["speed","node","handleCpmponent","bodyCollider"],2,1,1,1],["cc.SpriteRenderer",["node","_materials","_spriteFrame"],3,1,3,6],["c5f32IH3ZRCnJLY9Yf3lzNM",["node","particle"],3,1,1],["30eb78kKl5Bv4STN+o8xF5p",["node"],3,1],["cc.Label",["_string","_horizontalAlign","_actualFontSize","_fontSize","_lineHeight","_overflow","_isBold","node"],-4,1],["cc.LabelOutline",["node"],3,1],["8c51af8h1VDaZLyMCAjIf0C",["node"],3,1],["1c321OQ+qlOc55GZuaYpyg7",["node"],3,1],["ac8e9EYrNtGHIiLMH5F6QdO",["node"],3,1],["cc.TargetInfo",["localID"],2],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,4],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,8],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["43ac8zi+5pC777qPjNTSr4o",["node","target"],3,1,1],["cc.DirectionalLight",["_colorTemperature","_illuminanceLDR","node","_color","_staticSettings"],1,1,5,4],["cc.StaticLightSettings",[],3],["cc.ParticleSystem",["node","_materials","startColor","startSizeX","startSizeY","startSizeZ","startSpeed","startRotationX","startRotationY","startRotationZ","startDelay","startLifetime","gravityModifier","rateOverTime","rateOverDistance","_colorOverLifetimeModule","_shapeModule","_sizeOvertimeModule","_velocityOvertimeModule","_forceOvertimeModule","_limitVelocityOvertimeModule","_rotationOvertimeModule","_textureAnimationModule","_noiseModule","_trailModule","renderer"],3,1,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],["cc.ColorOvertimeModule",["color"],3,4],["cc.ShapeModule",["_enable","emitFrom","radius","length","arcSpeed"],-1,4],["cc.SizeOvertimeModule",["_enable","separateAxes","size","x","y","z"],1,4,4,4,4],["cc.VelocityOvertimeModule",["x","y","z","speedModifier"],3,4,4,4,4],["cc.ForceOvertimeModule",["x","y","z"],3,4,4,4],["cc.LimitVelocityOvertimeModule",["limitX","limitY","limitZ","limit"],3,4,4,4,4],["cc.RotationOvertimeModule",["x","y","z"],3,4,4,4],["cc.TextureAnimationModule",["frameOverTime","startFrame"],3,4,4],["cc.RealCurve",["_times","_values"],2,9],["cc.RealKeyframeValue",["interpolationMode","value"],1],["cc.NoiseModule",[],3],["cc.TrailModule",["lifeTime","widthRatio","colorOverTrail","colorOvertime","_particleSystem"],3,4,4,4,4,1],["cc.ParticleSystemRenderer",["_cpuMaterial","_mainTexture"],3,6,6],["0d4251JnlNKJZO4rLPhFF1y",["node","handle"],3,1,1],["cc.Animation",["playOnLoad","node","_clips"],2,1,3]],[[12,0,2,3,2],[54,0,2],[27,1],[28,0,1,2,3],[15,0,1,2,3,1],[0,0,6,8,5,2],[18,1,3,2,4,1],[3,0,3,2],[52,0,1],[56,0,1,2,2],[0,0,6,7,9,5,10,11,2],[55,0,1,2,3],[8,1],[0,0,6,7,9,5,2],[0,3,4,6,9,3],[25,0,1,2,3,2],[19,0,1,2,3],[0,0,6,9,5,2],[6,0,2,4,5,3,2],[7,0,1,1],[8,0,2],[0,0,2,6,8,5,3],[24,0,2],[13,0,2,1,3,4],[5,0,2,3,2],[3,2,3,4,5,2],[14,0,1,3,6,4,3],[46,0,1,2,1],[48,0,1],[0,0,7,9,5,10,11,2],[0,0,8,5,2],[0,0,2,6,8,3],[3,1,3,2],[7,0,1,2,1],[35,0,1,2,3],[17,0,1,2],[58,0,1,2,2],[21,1],[0,0,6,7,9,5,10,12,11,2],[0,0,7,5,10,12,11,2],[0,0,2,1,7,8,5,4],[0,0,2,6,7,8,5,3],[0,0,1,6,8,5,10,11,3],[0,0,6,7,5,2],[6,0,2,4,5,3,7,8,2],[6,0,1,2,6,3,3],[3,1,3,4,2],[32,0,1,2,4],[4,0,4,3,1,2,5,6,7,8],[5,1,2,3,2],[16,0,1,2,4,3,5,6,7,2],[72,0,1,3],[10,1],[10,0,2],[0,0,7,8,9,2],[0,0,7,9,5,2],[0,0,6,7,9,10,12,11,2],[0,0,6,8,9,10,12,11,2],[0,0,7,8,9,5,12,2],[0,0,6,8,9,12,2],[0,0,1,6,7,8,5,3],[0,0,1,6,7,8,5,12,3],[0,0,6,7,8,5,2],[0,0,8,5,10,11,2],[0,0,1,6,7,3],[0,0,6,8,5,10,12,11,2],[6,0,2,6,3,2],[22,0,1,2,3,4,5,3],[11,0,1,2,3,4,2],[11,0,1,2,5,2],[23,0,1,2,3,1],[12,0,1,4,3],[26,0,1,2,3,4,5,6,1],[29,0,1,2,3,4],[13,0,1,3,3],[30,0,1,2,3,5],[31,0,1,1],[3,0,3,6,2],[3,1,3,4,5,2],[3,3,1],[3,0,3,4,2],[14,0,1,2,3,5,4,4],[15,0,4,1,2,3,1],[33,0,2],[7,0,1],[7,0,2,1],[34,0,1,1],[4,0,1,2,7,4],[4,0,7,2],[4,0,3,2,7,4],[4,0,3,1,7,4],[4,0,4,1,7,4],[5,1,0,2,4,3,3],[5,0,2,4,3,2],[5,2,3,1],[16,1,2,3,1],[17,1,1],[36,0,1],[37,0,1,2,3,4,5,4],[38,0,1,2,3,2],[39,0,1,2,3,4,1],[40,0,1,2,3,4,5,3],[41,0,1],[42,0,1,2,2],[43,1],[44,0,1,1],[45,0,1,2,3,2],[47,0,1,1],[49,0,1,2,3,4,5,6,7,8],[50,0,1],[51,0,1],[18,0,1,2,2],[53,0,1],[19,0,2,2],[57,0,1,2,3],[20,0,1,2,6,7,4],[20,3,4,5,0,1,2,6,7,7],[59,0,1,1],[60,0,1,2,3,4,3],[61,1],[62,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,1],[21,0,1],[8,1,2,2],[63,0,1],[64,0,1,2,3,4,5],[65,0,1,2,3,4,5,3],[66,0,1,2,3,1],[67,0,1,2,1],[68,0,1,2,3,1],[69,0,1,2,1],[70,0,1,1],[71,0,1,2],[73,1],[74,0,1,2,3,4,1],[75,0,1,1],[76,0,1,1],[77,0,1,2,2]],[[[{"name":"BackGround","rect":{"x":0,"y":0,"width":1024,"height":1024},"offset":{"x":0,"y":0},"originalSize":{"width":1024,"height":1024},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-512,-512,0,512,-512,0,-512,512,0,512,512,0],"indexes":[0,1,2,2,1,3],"uv":[0,1024,1024,1024,0,0,1024,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-512,"y":-512,"z":0},"maxPos":{"x":512,"y":512,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[7],[19]],[[[52],[54,"Character",[-3,-4],[[70,-2,[22,"5eypEH9ZNbyp2ZhJ2bZ4bH"],[9,10,11],12]],[0,"5cOAlUBe5TW4pKlwREhLur",-1,0]],[29,"mixamorig:LeftHand",[-5,-6,-7,-8,-9],[0,"d7cIfo9xtV9I1IdOQzqUYZ",1,0],[1,3.725290215195187e-11,0.003177742473781109,-3.1664967869993177e-10],[3,0.013228453030617468,-0.019160893199928728,-0.029208945698145194,0.9993021093210003],[1,1.4533551456387799,-2.1541116494446237,-3.3757608553821994]],[29,"mixamorig:RightHand",[-10,-11,-12,-13,-14],[0,"aezdIKt+Zb+ZSK/1KYoycl",1,0],[1,1.490116086078075e-10,0.0031794521491974592,1.490116086078075e-10],[3,0.01333746285306892,0.016790320734951004,0.07778939437125156,0.9967391872188103],[1,1.3907644646095734,1.8213282547729006,8.946918430893165]],[29,"mixamorig:Hips",[-15,-16,-17],[0,"6fM6jFAdhSHLnIHSkf9Eb5",1,0],[1,-0.001114951679483056,-0.00007177217048592865,0.0016581547679379582],[3,0.4858258400866902,0.5137835181251591,0.5137807763114801,0.48582822427249805],[1,-89.99473672035882,179.9947572189379,86.79616238536887]],[55,"mixamorig:Spine2",[-18,-19,-20],[0,"c7duRjEC1as6ff1r5QycMR",1,0],[1,-1.1175870645585562e-10,0.0016516927862539887,5.005858921824924e-11]],[56,"Armature",1,[4],[0,"62e7nC6wlQ46oLPr47OmLa",1,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,100,100,100],[1,-90.00000965934633,0,0]],[10,"mixamorig:Spine",4,[-21],[0,"2eBRQt9FlcI7Pb6ABr8FCU",1,0],[1,-5.366018501935799e-13,0.0012387513415887952,0.0000067046244112134445],[3,0.0026098326332702616,0.0007110868342378073,0.2636077060829353,0.9646261765175324],[1,0.3101052021909258,-0.0002713690538662164,30.568591675985285]],[10,"mixamorig:Spine1",7,[5],[0,"dfzcurkzZZbYEA6i0yTZk0",1,0],[1,-3.1664967869993177e-10,0.0014452235773205757,-8.032657178302927e-11],[3,-4.8491461715802767e-8,0.0012296760739066155,0.22718675529666424,0.9738504331336125],[1,-0.035704051259461196,0.15302339309187957,26.26297873536635]],[10,"mixamorig:Neck",5,[-22],[0,"b7GVPCL9BaqZsusuNmd8yI",1,0],[1,6.5658239956079e-10,0.0018581547774374485,1.1757947393498114e-10],[3,-0.002706188405754615,3.2556485554035044e-9,-8.06179280253043e-9,0.9999963382654521],[1,-0.31010672694354696,3.7056846439440946e-7,-9.248196203137116e-7]],[10,"mixamorig:Head",9,[-23],[0,"4eGchLbvNetZlrTunDV9mP",1,0],[1,3.864988606938624e-10,0.0012302887625992298,-0.00001597354821569752],[3,-0.2743736139710772,-0.2798233261129198,-0.022633144072909006,0.9197313558365442],[1,-31.37503114372475,-32.03770896010526,6.425975302592514]],[13,"mixamorig:HeadTop_End",10,[-24],[0,"c3wrqp67JcsLQAuuYIk8KS",1,0],[1,-5.9604643443123e-10,0.012097461149096489,-0.00015706344856880605]],[18,"mixamorig:HeadTop_End_end",11,[[17,"mixamorig:HeadTop_End_end_end",-25,[0,"caSENzqsFVcYBKV0UY1iRO",1,0],[1,-2.2204459996194763e-18,0.01209847442805767,2.2204459996194763e-18]]],[0,"46s29KGpxYSZOAjyoCZjVz",1,0],[1,2.98023217215615e-10,0.012098477222025394,4.4703482582342247e-10]],[10,"mixamorig:LeftShoulder",5,[-26],[0,"03SEPg/E5Vo6M78aG2SLo2",1,0],[1,0.0006819161935709417,0.0016468182438984513,0.00002132661575160455],[3,0.635540474097339,0.3397181867836994,-0.5878702297731849,0.3675438100403106],[1,119.93427440271957,85.52636802828845,-0.01872501418636466]],[10,"mixamorig:LeftArm",13,[-27],[0,"ee0VuKJNxcRr8PsgTdm6jL",1,0],[1,-8.381903504606214e-11,0.0014287109952419996,9.778886728151193e-11],[3,0.2339066535161817,-0.13370567389424756,0.18397386137114835,0.9452851889993493],[1,30.845043531489377,-20.703709004507164,16.574763633420822]],[10,"mixamorig:LeftForeArm",14,[2],[0,"aanc0lVuJXTYmDmM3VNdKr",1,0],[1,-3.725290215195187e-11,0.00309254159219563,8.754432179181038e-10],[3,0.014888628516679148,-0.032554541068986864,0.3738735947055427,0.9267885766336547],[1,4.126125388624877,-5.682440345895708,43.79134740336412]],[10,"mixamorig:LeftHandThumb1",2,[-28],[0,"64Hx+wx41XlY1qeYXEqVJg",1,0],[1,-0.0006117040175013244,0.00025784835452213883,0.00005527235407498665],[3,0.1806281548550568,0.15244645230844533,0.22719416544732388,0.9447308399956679],[1,18.114933003756025,13.616589772388558,28.96969274041866]],[10,"mixamorig:LeftHandThumb2",16,[-29],[0,"c2RLW30PBZf6WAEK39Li/K",1,0],[1,-0.00012109283125028014,0.0005189591902308166,-1.145526784540607e-9],[3,0.0011566058646253596,-0.010757951700372624,0.12156906388526402,0.992524000437343],[1,0.28998287971357434,-1.277517930343336,13.963016900521614]],[10,"mixamorig:LeftHandThumb3",17,[-30],[0,"14lm7CxbNdNJPrJsTB2ZID",1,0],[1,0.000009073093679035082,0.0006120744510553777,6.007030428634152e-10],[3,-0.001194134695441609,-0.008865185019629398,0.11891713654833168,0.9928638865282804],[1,-0.015494545705378837,-1.0212938603384671,13.65990648498558]],[13,"mixamorig:LeftHandThumb4",18,[-31],[0,"662cIcoqZXQ7qgUZwOEIbR",1,0],[1,0.00011201925372006372,0.0004326149937696755,-7.590278960911689e-10]],[18,"mixamorig:LeftHandThumb4_end",19,[[17,"mixamorig:LeftHandThumb4_end_end",-32,[0,"baGBPaIR1cyaOPt19x0Y67",1,0],[1,-5.551114999048691e-19,0.00044688445632345974,0]]],[0,"278RM4XoBcjrkHteC7W1M0",1,0],[1,2.2351741291171123e-10,0.0004468845436349511,-1.0011717843649848e-10]],[10,"mixamorig:LeftHandIndex1",2,[-33],[0,"86sFtD8KhWT4c1s6ljoz53",1,0],[1,-0.0006692525930702686,0.0014394198078662157,-0.000003861226105073001],[3,-0.0032424474477952296,0.00042267841451239355,0.07825948901016908,0.9969276604936655],[1,-0.3788491584128659,0.07832381362536894,8.976848523549513]],[10,"mixamorig:LeftHandIndex2",21,[-34],[0,"b7lEiRgrddj5+/o6FKO0l2",1,0],[1,6.51404263862787e-7,0.000573475903365761,-1.043081288010228e-9],[3,-1.9557784966582561e-7,0.000024396006989923897,-0.0008732831711070162,0.999999618390577],[1,-0.000019970262722158936,0.0027955601015516134,-0.10007089328484335]],[10,"mixamorig:LeftHandIndex3",22,[-35],[0,"6dGtAHJX1YeaAzXwMpT9WG",1,0],[1,3.361701885751245e-7,0.0006044070469215512,-5.9604643443123e-10],[3,0.0000016381984545251117,-0.00017476659552921183,-0.0013260123082345146,0.999999105572256],[1,0.00016116836143217312,-0.020026580644550897,-0.151949892704831]],[10,"mixamorig:LeftHandIndex4",23,[-36],[0,"8cZE/VCWZUtb4U4urTG8SP",1,0],[1,-9.868293773251935e-7,0.0003768897440750152,-9.313225746154785e-10],[3,-8.149071391009893e-7,0.000001042149960993804,-9.56933874362289e-8,0.9999999999991205],[1,-0.00009338146810323854,0.0001194215798333302,-0.00001096575177230794]],[18,"mixamorig:LeftHandIndex4_end",24,[[17,"mixamorig:LeftHandIndex4_end_end",-37,[0,"d0L/lrNYBdJpRNx5ZwuHHU",1,0],[1,-5.551114999048691e-19,0.00037689029704779387,1.1102229998097382e-18]]],[0,"02WsSlgoleIb/YgCarNpEP",1,0],[1,1.490116086078075e-10,0.0003768897440750152,-1.1175871339474952e-10]],[10,"mixamorig:LeftHandMiddle1",2,[-38],[0,"c67FejdCpZVa3LTl3hVAcM",1,0],[1,-0.00024073050008155406,0.0015427847392857075,-0.000010476074749021791],[3,-0.0031752360468606023,-0.0004494758897774895,0.07739145296444935,0.9969956262970879],[1,-0.3631283436566877,-0.023473304820268617,8.877403223915671]],[10,"mixamorig:LeftHandMiddle2",26,[-39],[0,"5e4sZ+eCtado/yZR0kknLP",1,0],[1,4.2419881651767355e-7,0.0006641059881076217,-2.5704502970569365e-9],[3,-0.0000011213122661494888,6.891786341607444e-8,6.239860539377021e-8,0.9999999999993672],[1,-0.00012849292122604606,0.000007897413431374394,0.000007150344617668506]],[10,"mixamorig:LeftHandMiddle3",27,[-40],[0,"b6PrfHkM5ev5jv1lpqa6IW",1,0],[1,3.2324342669198813e-7,0.0006331293261609972,-1.9371508841459217e-9],[3,-9.629882084619217e-7,-0.0002156907395202415,-0.0011903049694513227,0.9999992683250609],[1,-0.00013977061553008263,-0.024716522179923067,-0.13639890740046282]],[13,"mixamorig:LeftHandMiddle4",28,[-41],[0,"e8NkZDGBZTQ4tzH7YaFTx2",1,0],[1,-7.489509812330652e-7,0.0004204495926387608,1.3038515822572094e-9]],[18,"mixamorig:LeftHandMiddle4_end",29,[[17,"mixamorig:LeftHandMiddle4_end_end",-42,[0,"ccz4Doespes7nlkmUrTBYh",1,0],[1,5.551114999048691e-19,0.0004204498545732349,1.1102229998097382e-18]]],[0,"12UUTA0GZak6sd8WZd6ow7",1,0],[1,2.421438605182402e-10,0.0004204507567919791,1.8626451769865326e-10]],[10,"mixamorig:LeftHandRing1",2,[-43],[0,"ba/aepz3lf6ZhwBvT79nSN",1,0],[1,0.00023700341989751905,0.001661748276092112,-0.000016303285519825295],[3,-0.002914881053374924,-0.0038070116968665713,0.07740169637425169,0.996988459075015],[1,-0.30287972622349574,-0.4140498880471689,8.87964487210237]],[13,"mixamorig:LeftHandRing2",31,[-44],[0,"52pznaN+hTuKrzAATE2U3e",1,0],[1,2.3458153464162024e-7,0.0005552564398385584,-4.097819306103645e-10]],[13,"mixamorig:LeftHandRing3",32,[-45],[0,"7dUIsx8OVanJ02oi58inI6",1,0],[1,1.0266899863609069e-7,0.000540788983926177,-1.1175870645585562e-10]],[13,"mixamorig:LeftHandRing4",33,[-46],[0,"9fEEHe3PhWbrlr0sBWmCki",1,0],[1,-3.368966190464562e-7,0.0003697621577885002,8.940696516468449e-10]],[18,"mixamorig:LeftHandRing4_end",34,[[17,"mixamorig:LeftHandRing4_end_end",-47,[0,"11eAT9vP1eFplalchhDttD",1,0],[1,0,0.0003697609936352819,0]]],[0,"bbFmiF6d9bZ44Wcj8ovxSb",1,0],[1,-3.5390257391298974e-10,0.0003697615466080606,5.21540644005114e-10]],[10,"mixamorig:LeftHandPinky1",2,[-48],[0,"87GsDETwpWL5aohopsrXb3",1,0],[1,0.0006729799788445234,0.001519730780273676,-0.000016380659872083925],[3,-0.002907645443859208,-0.0038950760197392167,0.07740189190694496,0.9969881248590673],[1,-0.3012523011643235,-0.42429803801632626,8.87969098508554]],[13,"mixamorig:LeftHandPinky2",36,[-49],[0,"87PkBtkmpdlp3DJP4LMEFS",1,0],[1,9.536743306171047e-8,0.0005621942109428346,-8.568167841893626e-10]],[10,"mixamorig:LeftHandPinky3",37,[-50],[0,"9ejhhFEIhYqYC7ECP9LZYh",1,0],[1,4.928558894334856e-8,0.00047669827472418547,-1.3411045607369942e-9],[3,-0.0000015571713447551518,2.0582228898976587e-7,9.872020711997319e-8,0.9999999999987617],[1,-0.00017843869439479828,0.000023585514593147633,0.000011312465714589625]],[13,"mixamorig:LeftHandPinky4",38,[-51],[0,"a16mS4K61c66YYlzYB9RzL",1,0],[1,-1.437217065358709e-7,0.000306068075587973,1.3411045607369942e-9]],[18,"mixamorig:LeftHandPinky4_end",39,[[17,"mixamorig:LeftHandPinky4_end_end",-52,[0,"cfxkGIpJVSY6XBYoSrhcLW",1,0],[1,-5.551114999048691e-19,0.0003060667950194329,-1.1102229998097382e-18]]],[0,"03cxQTYzFYEoa5hOchI9mV",1,0],[1,-1.8626451769865326e-10,0.00030606696964241564,-4.4703482582342247e-10]],[10,"mixamorig:RightShoulder",5,[-53],[0,"c7EwHSCjZQJZgCWfkSWRlY",1,0],[1,-0.0006819165428169072,0.0016468617832288146,0.000029593044018838555],[3,0.5790880851211334,-0.41345655437674556,0.5544736320914246,0.4315896878158601],[1,106.5928064471316,-87.52259861086827,-0.014056096227983542]],[10,"mixamorig:RightArm",41,[-54],[0,"8fF2oxJkBX+aDd/iQLTecM",1,0],[1,-8.381903504606214e-11,0.0014292756095528603,-1.396983917434369e-10],[3,-0.14036330718262874,0.011465571001772252,-0.15956460095847985,0.9770904875185917],[1,-16.568211743077974,-1.3516993198727985,-18.363035294025014]],[10,"mixamorig:RightForeArm",42,[3],[0,"68/WKzNPZTKZoToHAibs8d",1,0],[1,1.8626451075975936e-11,0.0030935590621083975,-1.594889914580122e-10],[3,0.20903308229350925,0.09412666948020272,-0.6503777956815322,0.7241920073322204],[1,81.09422934017982,71.53723068398163,-64.50803205995155]],[10,"mixamorig:RightHandThumb1",3,[-55],[0,"e3mVd3DvFZXLn6UfjAW6PT",1,0],[1,0.0005954708904027939,0.00024363704142160714,0.00006374176882673055],[3,0.17379738694673652,-0.1480842258625933,-0.23074090884710585,0.9458457397089518],[1,17.359486112898146,-13.240869924269884,-29.206843194807586]],[10,"mixamorig:RightHandThumb2",44,[-56],[0,"ceAQKxcNNeWZ5tA9Eh1MH7",1,0],[1,0.00011263214400969446,0.0005048150778748095,-2.98023217215615e-10],[3,0.0009522558291443201,0.009099379876462229,-0.1155597835518399,0.9932583908128598],[1,0.23516025120782996,1.0771151070465526,-13.27023364683566]],[10,"mixamorig:RightHandThumb3",45,[-57],[0,"aex8tbhrVambBlUSUjLfAn",1,0],[1,-0.0000074083031904592644,0.0006078697624616325,-4.4703482582342247e-10],[3,0.0007224721667893246,-0.006361835797408527,-0.10152840126535492,0.994812036927457],[1,0.008519867126051987,-0.7319349837846314,-11.654671847474077]],[13,"mixamorig:RightHandThumb4",46,[-58],[0,"c15fFVXClcfKElti6ZosGy",1,0],[1,-0.00010522305819904432,0.0004809308156836778,1.490116086078075e-10]],[18,"mixamorig:RightHandThumb4_end",47,[[17,"mixamorig:RightHandThumb4_end_end",-59,[0,"7fAPqai+hZfKOtbiXg+eaM",1,0],[1,0,0.0004923072992824018,0]]],[0,"f9CnPYwNpRTJ0gZwo/I8KD",1,0],[1,-1.8626451769865326e-10,0.0004923069500364363,2.98023217215615e-10]],[10,"mixamorig:RightHandIndex1",3,[-60],[0,"49Vw7e3JtZJKhvdJE3tXDX",1,0],[1,0.00065873988205567,0.0014192004455253482,0.000008572936167183798],[3,-0.011904816311041294,0.0015413409781932627,-0.07883352897437104,0.9968155166960616],[1,-1.362997016577383,0.06938084223579831,-9.044508204469317]],[10,"mixamorig:RightHandIndex2",49,[-61],[0,"c7EfIhuZdRwb3biNSg4y3i",1,0],[1,-8.782744203017501e-7,0.00061383395222947,-6.705522803684971e-10],[3,-8.274805263255224e-7,-0.00003526453745342897,0.000814588993849178,0.9999996676001942],[1,-0.00009153060447620446,-0.004040945106833663,0.09334503637979323]],[10,"mixamorig:RightHandIndex3",50,[-62],[0,"e1OtL8vOtfyIRtPbjhCBGM",1,0],[1,1.889467284854618e-7,0.0005669169477187097,5.9604643443123e-10],[3,2.710151007053709e-7,0.00005847779628049081,0.001231221617283789,0.999999240336513],[1,0.000022805596258303202,0.006701038848348612,0.14108764185208275]],[13,"mixamorig:RightHandIndex4",51,[-63],[0,"16rT5Ry5VQ+5UWz5zVhpmO",1,0],[1,6.875768576719565e-7,0.00040582127985544503,-2.60770322002557e-10]],[18,"mixamorig:RightHandIndex4_end",52,[[17,"mixamorig:RightHandIndex4_end_end",-64,[0,"65YQjEyg5Zn4B5RaXhcQ/m",1,0],[1,0,0.0004058200865983963,0]]],[0,"36qym0jzpcnoaGZgBb7hfo",1,0],[1,7.450580430390374e-11,0.0004058199701830745,4.842877210364804e-10]],[10,"mixamorig:RightHandMiddle1",3,[-65],[0,"6axrZ0njRR06zoTM88GENK",1,0],[1,0.00023972467170096934,0.0015243713278323412,-0.000037411937228171155],[3,-0.011920891843559567,0.0013301421580269154,-0.0780182713582631,0.9968797682738687],[1,-1.3666490447876751,0.045931195165231725,-8.950516252803846]],[13,"mixamorig:RightHandMiddle2",54,[-66],[0,"5bW6KQ1LdU3b5zsqMybPjt",1,0],[1,-2.9191375006121234e-7,0.0006743025733157992,3.725290215195187e-11]],[10,"mixamorig:RightHandMiddle3",55,[-67],[0,"8aQPmKs5pcrL0KFjkTFO8l",1,0],[1,-2.867728596811503e-7,0.0006169552798382938,1.1175870645585562e-10],[3,3.753233357362704e-7,0.00007296639467434199,0.0010964447780711028,0.9999993962421243],[1,0.000033841201760841876,0.008361300850603983,0.1256433444835582]],[13,"mixamorig:RightHandMiddle4",56,[-68],[0,"975m3HzwZUm5mUm8mVCVER",1,0],[1,5.78388551275566e-7,0.0004556446510832757,-2.2351741291171123e-10]],[18,"mixamorig:RightHandMiddle4_end",57,[[17,"mixamorig:RightHandMiddle4_end_end",-69,[0,"95k0cY6eZdLbtyvHsS449o",1,0],[1,2.7755574995243454e-19,0.0004556427011266351,0]]],[0,"aftvnyn0JebKwXxZPjCHRb",1,0],[1,-3.725290215195187e-11,0.0004556430212687701,4.097819306103645e-10]],[10,"mixamorig:RightHandRing1",3,[-70],[0,"deiI1qwhdeF6QJ9A/sjqyi",1,0],[1,-0.00025171093875542283,0.0016543871024623513,0.000002979915507239639],[3,-0.011898181203675352,0.0016294109830223198,-0.07891073691978041,0.9968093468174695],[1,-1.361434433742507,0.07952236917832026,-9.053502464226437]],[10,"mixamorig:RightHandRing2",59,[-71],[0,"5bNF8psvRfKadYxUKETBMk",1,0],[1,-0.0000014397129461940494,0.000560537853743881,-1.8626451769865326e-10],[3,-3.7904828763206597e-7,-0.00003216973707634416,-0.000014576595267501917,0.9999999993762436],[1,-0.00004348946909134858,-0.003686380959995683,-0.0016703533788750215]],[10,"mixamorig:RightHandRing3",60,[-72],[0,"24Kyeq3pJf4a4lH3zGB4RG",1,0],[1,-5.526468385141925e-7,0.0005518567049875855,7.450580707946131e-10],[3,1.8905946666744655e-7,0.00029713422372783043,0.003812830499535763,0.9999926869906596],[1,-0.00010816203183654861,0.03404973434442551,0.43691923702975094]],[13,"mixamorig:RightHandRing4",61,[-73],[0,"814GlzrNJdJZlLD8lbmViS",1,0],[1,0.0000019923970739910146,0.0003436039842199534,6.332993573998635e-10]],[18,"mixamorig:RightHandRing4_end",62,[[17,"mixamorig:RightHandRing4_end_end",-74,[0,"59LIp9ECBbELIyQ3dkGYq5",1,0],[1,6.938893748810864e-20,0.00034360922290943563,-1.1102229998097382e-18]]],[0,"0fco1PNulYG59ne89GRUQu",1,0],[1,1.1175870645585562e-10,0.0003436098340898752,1.490116086078075e-10]],[10,"mixamorig:RightHandPinky1",3,[-75],[0,"6aSau+d3RTnLA5GoLtf/x9",1,0],[1,-0.0006467537605203688,0.0015333594055846334,-0.000014012604879098944],[3,-0.011813867951121663,0.0027000319938723107,-0.07803499028836541,0.9968769646460691],[1,-1.3418723650421638,0.20529561649737935,-8.954285168024725]],[13,"mixamorig:RightHandPinky2",64,[-76],[0,"23vIZUCIFWtoKQFEQRd2Ew",1,0],[1,-7.657334322175302e-8,0.0005585996550507843,-1.1362135676762364e-9]],[13,"mixamorig:RightHandPinky3",65,[-77],[0,"8dmRpW7mBR0J0jFBAa8Kyb",1,0],[1,4.729255920210562e-8,0.0004656982491724193,-9.685754420729609e-10]],[13,"mixamorig:RightHandPinky4",66,[-78],[0,"44weYmFqZZnK4wjECMxIkf",1,0],[1,2.926215536547261e-8,0.00032093204208649695,-2.98023217215615e-10]],[18,"mixamorig:RightHandPinky4_end",67,[[17,"mixamorig:RightHandPinky4_end_end",-79,[0,"8c3HcXZbVQspJZARYRQil9",1,0],[1,-4.163336249286518e-19,0.0003209293354302645,0]]],[0,"78yxfuJyZWkoCjo663/A5H",1,0],[1,-2.561137135703717e-10,0.0003209295973647386,-9.313225884932663e-11]],[38,"mixamorig:LeftUpLeg",4,[-80],[0,"begexP04pRxJ0YMvkbFkSI",1,0],[1,0.0013528066920116544,-0.0006907263305038214,-0.00003789725815295242],[3,0.00834437447029677,0.719323266544793,0.6945783986422375,-0.008078227628224742],[1,1.0000025033950806,1.000000238418579,0.9999999403953552],[1,-87.99524423229039,-178.6698526327687,0.044844298676021965]],[10,"mixamorig:LeftLeg",69,[-81],[0,"f7RalD7E9aYIYSv1v2EZ6z",1,0],[1,8.454662664414414e-11,0.0031077442690730095,-3.929017181047989e-11],[3,-0.07751533342894262,0.0016016209169764524,-0.027325142012108068,0.9966153443068475],[1,-8.896501712527847,-0.05989707284362625,-3.1364252344558077]],[10,"mixamorig:LeftFoot",70,[-82],[0,"173WF9q7JeNZV5d7dDa4+7",1,0],[1,9.476934514918156e-11,0.0023084888234734535,-1.4173565099362406e-10],[3,0.49998286999833136,-0.00003241399504211258,0.01698907486264153,0.8658686389937426],[1,60.02164342987914,-0.9770544442624267,1.684062376877388]],[10,"mixamorig:LeftToeBase",71,[-83],[0,"2f9ohh0XNYcan3NubdU+sv",1,0],[1,-7.916241967498294e-11,0.002792191691696644,6.658956164251606e-10],[3,0.29768475440407993,-0.011357643469936571,0.0035326610716913272,0.9545901273509722],[1,34.639710054255744,-1.3630248329454,-0.00100312587255031]],[10,"mixamorig:LeftToe_End",72,[-84],[0,"f9wmd8DdJSF6l78Cu9irFE",1,0],[1,-9.313225884932663e-11,0.0009937916183844209,-1.0011718121205604e-9],[3,9.106299216452823e-7,0.000009978249181084927,-9.380164555734373e-8,0.9999999999497984],[1,0.00010435060966699919,0.0011434231398188368,-0.00001074783556778089]],[44,"mixamorig:LeftToe_End_end",73,[[17,"mixamorig:LeftToe_End_end_end",-85,[0,"19NZoJoSFbQpyWfp00Gq7z",1,0],[1,2.7755574995243454e-19,0.0009937926661223173,0]]],[0,"65JTmJfrJRhZDX9fFtydKA",1,0],[1,-1.9557773456302385e-10,0.0009937920840457082,-2.2351741291171123e-10],[3,-1.373409901360448e-7,-0.0000013953249435857997,1.3646786101148894e-7,0.9999999999990079],[1,-0.00001573809635768955,-0.00015989245848589958,0.000015638086910046005]],[38,"mixamorig:RightUpLeg",4,[-86],[0,"f2WDqgz39XN6KyyXegdIbw",1,0],[1,-0.0013528068084269762,-0.0006907260976731777,-0.000012925023838761263],[3,-0.00826927006233065,0.7177608706103854,0.6961925719793498,0.008176460972549485],[1,1.0000025033950806,1.000000238418579,1],[1,-88.25249156862291,178.6676671698542,-0.027841978167416043]],[10,"mixamorig:RightLeg",75,[-87],[0,"28x+32pp9WxamsBLlmE51T",1,0],[1,-5.384208703884674e-12,0.0031078276224434376,-3.2305252223308045e-11],[3,-0.077670372858683,-0.0015750148998870488,0.027331948222667997,0.9966031291915614],[1,-8.914428290443135,0.06348924027520224,3.136956718667793]],[10,"mixamorig:RightFoot",76,[-88],[0,"79z3HM/9NYNqhqbZAg5f6L",1,0],[1,-3.0604498102437816e-11,0.00230860966257751,-3.608875004390555e-11],[3,0.508035893940916,-0.0002454651091582516,-0.016924625120444528,0.8611695694107329],[1,61.09000204382631,0.9615321201983303,-1.6847016760083693]],[10,"mixamorig:RightToeBase",77,[-89],[0,"e7D+L1uiNVpZWXnjnH3PyA",1,0],[1,-3.725290215195187e-11,0.0028446174692362547,-1.1175870645585562e-10],[3,0.2911225503603107,0.011912504922555692,-0.0036171692687327556,0.9566047611133137],[1,33.8530383776125,1.4266517221070727,0.0008935242451311278]],[10,"mixamorig:RightToe_End",78,[-90],[0,"1erELIlsBYC7jTPgqWlbZf",1,0],[1,-9.313225537987968e-12,0.0009962156182155013,-2.60770322002557e-10],[3,-7.932247853565055e-7,-0.000011741911293125582,-7.823109626228239e-8,0.9999999999307461],[1,-0.00009089697006775245,-0.0013455239281676583,-0.000008963555981476655]],[44,"mixamorig:RightToe_End_end",79,[[17,"mixamorig:RightToe_End_end_end",-91,[0,"93AY+Zj8FQapX2EiXQipgQ",1,0],[1,0,0.0009962148033082485,1.1102229998097382e-18]]],[0,"0c+NvziehX5LSzctd2hGmS",1,0],[1,-2.7939676613963904e-11,0.0009962145704776049,3.3527614018424856e-10],[3,1.5326077118399986e-7,-0.000003881141765275702,-2.2124733334126998e-7,0.9999999999924323],[1,0.00001756229230851045,-0.0004447460818000154,-0.0000253531450198947]],[57,"Character",1,[[72,-92,[22,"ecQqFE8TxRaKuvch77lJAs"],[0,1,2,3,4,5,6],[2],1,7,8]],[0,"32NS6USY9c65NSrcWM1MyO",1,0],[3,-0.7071068407911908,1.5800463430489463e-9,1.9025048529102363e-9,0.7071067215818992],[1,100,100,100],[1,-90.00000965934633,2.8218579192415624e-7,2.612829540758042e-8]]],0,[0,4,1,0,0,1,0,-1,6,0,-2,81,0,-1,16,0,-2,21,0,-3,26,0,-4,31,0,-5,36,0,-1,44,0,-2,49,0,-3,54,0,-4,59,0,-5,64,0,-1,7,0,-2,69,0,-3,75,0,-1,9,0,-2,13,0,-3,41,0,-1,8,0,-1,10,0,-1,11,0,-1,12,0,3,12,0,-1,14,0,-1,15,0,-1,17,0,-1,18,0,-1,19,0,-1,20,0,3,20,0,-1,22,0,-1,23,0,-1,24,0,-1,25,0,3,25,0,-1,27,0,-1,28,0,-1,29,0,-1,30,0,3,30,0,-1,32,0,-1,33,0,-1,34,0,-1,35,0,3,35,0,-1,37,0,-1,38,0,-1,39,0,-1,40,0,3,40,0,-1,42,0,-1,43,0,-1,45,0,-1,46,0,-1,47,0,-1,48,0,3,48,0,-1,50,0,-1,51,0,-1,52,0,-1,53,0,3,53,0,-1,55,0,-1,56,0,-1,57,0,-1,58,0,3,58,0,-1,60,0,-1,61,0,-1,62,0,-1,63,0,3,63,0,-1,65,0,-1,66,0,-1,67,0,-1,68,0,3,68,0,-1,70,0,-1,71,0,-1,72,0,-1,73,0,-1,74,0,3,74,0,-1,76,0,-1,77,0,-1,78,0,-1,79,0,-1,80,0,3,80,0,0,81,0,11,1,2,3,15,3,3,43,4,3,6,5,3,8,92],[0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,-2,-3,-4,-5,-6,-7,1,17,-1,-2,-3,12],[3,3,3,3,3,3,3,20,21,10,22,23,10]],[[[3,".bin",3065741510,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":26560,"length":3342,"count":1671,"stride":2}},{"primitiveMode":7,"jointMapIndex":1,"vertexBundelIndices":[1],"indexView":{"offset":41742,"length":960,"count":480,"stride":2}},{"primitiveMode":7,"jointMapIndex":2,"vertexBundelIndices":[2],"indexView":{"offset":64702,"length":2214,"count":1107,"stride":2}},{"primitiveMode":7,"jointMapIndex":3,"vertexBundelIndices":[3],"indexView":{"offset":87076,"length":2718,"count":1359,"stride":2}},{"primitiveMode":7,"jointMapIndex":4,"vertexBundelIndices":[4],"indexView":{"offset":102594,"length":1230,"count":615,"stride":2}},{"primitiveMode":7,"jointMapIndex":2,"vertexBundelIndices":[5],"indexView":{"offset":133264,"length":2952,"count":1476,"stride":2}},{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[6],"indexView":{"offset":150936,"length":1596,"count":798,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":26560,"count":332,"stride":80},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":29902,"length":11840,"count":148,"stride":80},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":42702,"length":22000,"count":275,"stride":80},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":66916,"length":20160,"count":252,"stride":80},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":89794,"length":12800,"count":160,"stride":80},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":103824,"length":29440,"count":368,"stride":80},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":136216,"length":14720,"count":184,"stride":80},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}],"jointMaps":[[0,2,3,4,5,8,9,10,11,12,13,14,17,18,19,22,23,24,27,28,29,32,33,34,37,38],[0,2,3,5,8,9,10,11,12,13,14,17,22,27,32,37,38,39,40,41,42,43,66,72],[0,1,2,3,4,5,8,9,10,11,12,32,37,38,39,40,41,42,51,66,67,68,69,72,73,74,75],[0,38,39,40,41,42,43,46,47,48,51,52,53,56,57,58,61,62,63],[0,2,3,5,9,10,11,12,17,22,27,32,37,38,39,40,41,42,43,46,47,51,56,61,62,63,66,72]]},"minPosition",8,[1,-0.01150080282241106,-0.00628581503406167,0.0038998511154204607],"maxPosition",8,[1,0.011615625582635403,0.005705531220883131,0.031382814049720764]]],-1],0,0,[],[],[]],[[[73,"Skin-0",916709249,["Armature/mixamorig:Hips","Armature/mixamorig:Hips/mixamorig:Spine","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head/mixamorig:HeadTop_End","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:Neck/mixamorig:Head/mixamorig:HeadTop_End/mixamorig:HeadTop_End_end","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2/mixamorig:LeftHandThumb3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2/mixamorig:LeftHandThumb3/mixamorig:LeftHandThumb4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandThumb1/mixamorig:LeftHandThumb2/mixamorig:LeftHandThumb3/mixamorig:LeftHandThumb4/mixamorig:LeftHandThumb4_end","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3/mixamorig:LeftHandIndex4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandIndex1/mixamorig:LeftHandIndex2/mixamorig:LeftHandIndex3/mixamorig:LeftHandIndex4/mixamorig:LeftHandIndex4_end","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2/mixamorig:LeftHandMiddle3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2/mixamorig:LeftHandMiddle3/mixamorig:LeftHandMiddle4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandMiddle1/mixamorig:LeftHandMiddle2/mixamorig:LeftHandMiddle3/mixamorig:LeftHandMiddle4/mixamorig:LeftHandMiddle4_end","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2/mixamorig:LeftHandRing3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2/mixamorig:LeftHandRing3/mixamorig:LeftHandRing4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandRing1/mixamorig:LeftHandRing2/mixamorig:LeftHandRing3/mixamorig:LeftHandRing4/mixamorig:LeftHandRing4_end","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandPinky1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandPinky1/mixamorig:LeftHandPinky2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandPinky1/mixamorig:LeftHandPinky2/mixamorig:LeftHandPinky3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandPinky1/mixamorig:LeftHandPinky2/mixamorig:LeftHandPinky3/mixamorig:LeftHandPinky4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:LeftShoulder/mixamorig:LeftArm/mixamorig:LeftForeArm/mixamorig:LeftHand/mixamorig:LeftHandPinky1/mixamorig:LeftHandPinky2/mixamorig:LeftHandPinky3/mixamorig:LeftHandPinky4/mixamorig:LeftHandPinky4_end","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2/mixamorig:RightHandThumb3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2/mixamorig:RightHandThumb3/mixamorig:RightHandThumb4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandThumb1/mixamorig:RightHandThumb2/mixamorig:RightHandThumb3/mixamorig:RightHandThumb4/mixamorig:RightHandThumb4_end","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3/mixamorig:RightHandIndex4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandIndex1/mixamorig:RightHandIndex2/mixamorig:RightHandIndex3/mixamorig:RightHandIndex4/mixamorig:RightHandIndex4_end","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2/mixamorig:RightHandMiddle3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2/mixamorig:RightHandMiddle3/mixamorig:RightHandMiddle4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandMiddle1/mixamorig:RightHandMiddle2/mixamorig:RightHandMiddle3/mixamorig:RightHandMiddle4/mixamorig:RightHandMiddle4_end","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2/mixamorig:RightHandRing3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2/mixamorig:RightHandRing3/mixamorig:RightHandRing4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandRing1/mixamorig:RightHandRing2/mixamorig:RightHandRing3/mixamorig:RightHandRing4/mixamorig:RightHandRing4_end","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandPinky1","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandPinky1/mixamorig:RightHandPinky2","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandPinky1/mixamorig:RightHandPinky2/mixamorig:RightHandPinky3","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandPinky1/mixamorig:RightHandPinky2/mixamorig:RightHandPinky3/mixamorig:RightHandPinky4","Armature/mixamorig:Hips/mixamorig:Spine/mixamorig:Spine1/mixamorig:Spine2/mixamorig:RightShoulder/mixamorig:RightArm/mixamorig:RightForeArm/mixamorig:RightHand/mixamorig:RightHandPinky1/mixamorig:RightHandPinky2/mixamorig:RightHandPinky3/mixamorig:RightHandPinky4/mixamorig:RightHandPinky4_end","Armature/mixamorig:Hips/mixamorig:LeftUpLeg","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase/mixamorig:LeftToe_End","Armature/mixamorig:Hips/mixamorig:LeftUpLeg/mixamorig:LeftLeg/mixamorig:LeftFoot/mixamorig:LeftToeBase/mixamorig:LeftToe_End/mixamorig:LeftToe_End_end","Armature/mixamorig:Hips/mixamorig:RightUpLeg","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase/mixamorig:RightToe_End","Armature/mixamorig:Hips/mixamorig:RightUpLeg/mixamorig:RightLeg/mixamorig:RightFoot/mixamorig:RightToeBase/mixamorig:RightToe_End/mixamorig:RightToe_End_end"],[[[7,0.998437225818634,9.437884251894957e-9,0.05588311702013016,0,0.05588311702013016,-1.5358209282112512e-7,-0.998437225818634,0,-8.40489122744259e-10,1.0000001192092896,-1.538695357794495e-7,0,-8.477265822648405e-8,-0.011851131916046143,-0.0003251487505622208,1],[7,0.9984372854232788,0.0003024722682312131,0.055882297456264496,0,0.05588310956954956,-0.005404104944318533,-0.9984226226806641,0,-1.3535415011034502e-9,0.9999852776527405,-0.005412563215941191,0,-8.47698515826778e-8,-0.013091490603983402,-0.0002610007068142295,1],[7,0.9984372854232788,0.0003024700563400984,0.05588230863213539,0,0.055883120745420456,-0.005404092371463776,-0.9984226226806641,0,2.0282506230095976e-10,0.9999852776527405,-0.005412550177425146,0,-8.478463087158161e-8,-0.014536716043949127,-0.00026100085233338177,1],[7,0.9984372854232788,0.00030247209360823035,0.055882297456264496,0,0.05588310956954956,-0.005404043942689896,-0.9984226226806641,0,-4.584995050294083e-9,0.9999852776527405,-0.005412502214312553,0,-8.471418766475836e-8,-0.016188407316803932,-0.0002610015799291432,1],[7,0.998437225818634,9.890605667806085e-9,0.05588313937187195,0,0.05588313937187195,-1.4778757417843735e-7,-0.9984375238418579,0,-1.6163177463113243e-9,1.0000001192092896,-1.4810932214004424e-7,0,-8.47616732357892e-8,-0.018044890835881233,-0.0003586722887121141,1],[7,0.9984372854232788,9.431361469580679e-9,0.05588312819600105,0,0.055883124470710754,-1.6004103997602215e-7,-0.9984374046325684,0,-4.730298375221764e-10,1.0000001192092896,-1.6031799532356672e-7,0,-8.478482271812027e-8,-0.019275182858109474,-0.000342698855092749,1],[7,0.9984372854232788,9.5594305804525e-9,0.05588312819600105,0,0.055883124470710754,-1.615758549178281e-7,-0.9984374046325684,0,-5.151292170602062e-10,1.0000001192092896,-1.6185755669084756e-7,0,-8.478507140807778e-8,-0.03137264400720596,-0.00018563421326689422,1],[7,0.9984372854232788,9.526648803159787e-9,0.05588312819600105,0,0.055883124470710754,-1.6000227276435908e-7,-0.9984374046325684,0,-5.703341687812724e-10,1.0000001192092896,-1.602846140258407e-7,0,-8.477790203187396e-8,-0.043471112847328186,-0.00018563432968221605,1],[7,-0.02472839690744877,0.9565825462341309,-0.2904103696346283,0,0.9996793270111084,0.025243742391467094,-0.0019721852149814367,0,0.005444486625492573,-0.29036596417427063,-0.9569002389907837,0,0.00026031199377030134,0.004515187814831734,0.017268048599362373,1],[7,-0.09309592843055725,0.9951372742652893,-0.03216729685664177,0,0.9953121542930603,0.09386533498764038,0.023296551778912544,0,0.02620266005396843,-0.029847687110304832,-0.9992109537124634,0,0.00003884375109919347,-0.0015102794859558344,0.01747847907245159,1],[7,0.05105132609605789,0.9985669851303101,-0.01604582369327545,0,0.9984615445137024,-0.050684694200754166,0.022480912506580353,0,0.021635418757796288,-0.017168818041682243,-0.9996184706687927,0,-0.0006238029454834759,-0.004842145834118128,0.017402565106749535,1],[7,-0.059694960713386536,0.9943764805793762,0.0874713659286499,0,0.998215913772583,0.05956226587295532,0.004128433298319578,0,-0.0011047760490328074,0.08756174147129059,-0.9961586594581604,0,0.0006902684108354151,-0.009774623438715935,0.01647838018834591,1],[7,0.7689691185951233,0.6384233832359314,0.033190228044986725,0,0.6354245543479919,-0.7689915299415588,0.06991015374660492,0,0.07015527039766312,-0.032668858766555786,-0.9970011115074158,0,-0.007346644066274166,-0.005530273541808128,0.016956038773059845,1],[7,0.7689700722694397,0.6322753429412842,-0.09440610557794571,0,0.6354232430458069,-0.7397394180297852,0.22141054272651672,0,0.0701565071940422,-0.230245903134346,-0.9706003069877625,0,-0.007225586101412773,-0.002557160798460245,0.017820237204432487,1],[7,0.7689698934555054,0.6392094492912292,-0.009822613559663296,0,0.6354238390922546,-0.762549102306366,0.12147177755832672,0,0.07015567272901535,-0.09964964538812637,-0.9925464987754822,0,-0.007234640885144472,-0.005501811858266592,0.017243411391973495,1],[7,0.7689694762229919,0.6392098665237427,-0.009822784923017025,0,0.6354241371154785,-0.7625488638877869,0.12147154659032822,0,0.07015542685985565,-0.09964954107999802,-0.9925464987754822,0,-0.0073466491885483265,-0.00593443401157856,0.017243411391973495,1],[7,0.7689687609672546,0.6392107009887695,-0.009822296909987926,0,0.6354250311851501,-0.7625480890274048,0.12147195637226105,0,0.07015618681907654,-0.09964945912361145,-0.9925464391708374,0,-0.0073466552421450615,-0.006381326355040073,0.017243409529328346,1],[7,0.2203601747751236,0.9734861850738525,0.061365459114313126,0,0.9751380681991577,-0.22136899828910828,0.01007304061204195,0,0.02339037135243416,0.05762006342411041,-0.9980646967887878,0,-0.0018260841025039554,-0.010701182298362255,0.016775507479906082,1],[7,0.22035904228687286,0.9753955602645874,0.006678277160972357,0,0.9751383066177368,-0.2204546332359314,0.022470809519290924,0,0.023390188813209534,0.0015605968656018376,-0.9997250437736511,0,-0.0018267208943143487,-0.010316192172467709,0.01738136075437069,1],[7,0.22035951912403107,0.9441807270050049,-0.2448747307062149,0,0.975138247013092,-0.2072216272354126,0.07851430773735046,0,0.023388367146253586,-0.256087988615036,-0.9663705229759216,0,-0.0018270310247316957,-0.0060732560232281685,0.019608335569500923,1],[7,0.22035984694957733,0.9441813826560974,-0.24487273395061493,0,0.975138247013092,-0.20722156763076782,0.07851599901914597,0,0.023390434682369232,-0.2560863494873047,-0.9663711190223694,0,-0.0018260831711813807,-0.006450175773352385,0.019608328118920326,1],[7,0.22035996615886688,0.9441812634468079,-0.24487271904945374,0,0.9751381278038025,-0.20722170174121857,0.07851595431566238,0,0.023390356451272964,-0.2560863196849823,-0.9663709402084351,0,-0.0018260838696733117,-0.006827065721154213,0.019608328118920326,1],[7,0.003202880034223199,0.9973742961883545,0.07234622538089752,0,0.9999849796295166,-0.0035145815927535295,0.0041815778240561485,0,0.004424864426255226,0.0723317340016365,-0.9973709583282471,0,0.00021464235032908618,-0.011102111078798771,0.016659237444400787,1],[7,0.003202894004061818,0.9997977614402771,0.019843092188239098,0,0.9999849796295166,-0.003290038788691163,0.004360630642622709,0,0.0044250329956412315,0.01982881873846054,-0.9997937679290771,0,0.00021421484416350722,-0.01087467186152935,0.017254427075386047,1],[7,0.0032031256705522537,0.942948043346405,-0.33292409777641296,0,0.999984860420227,-0.001546851941384375,0.005239863879978657,0,0.004425934981554747,-0.33293578028678894,-0.9429392218589783,0,0.000213873281609267,-0.004707005340605974,0.020198719576001167,1],[7,0.0032028420828282833,0.9429477453231812,-0.33292484283447266,0,0.9999849796295166,-0.001546842628158629,0.005239030346274376,0,0.004425148479640484,-0.33293652534484863,-0.942939043045044,0,0.00021463811572175473,-0.0051274350844323635,0.02019871212542057,1],[7,0.003202843014150858,0.9429477453231812,-0.3329249322414398,0,0.9999849796295166,-0.0015468428609892726,0.005239030811935663,0,0.004425148945301771,-0.3329366445541382,-0.942939043045044,0,0.00021463813027366996,-0.005547883454710245,0.020198699086904526,1],[7,-0.0677129402756691,0.9976869225502014,-0.005930300801992416,0,0.9977031350135803,0.0677008330821991,-0.002217850647866726,0,-0.0018112347461283207,-0.006066856440156698,-0.9999799728393555,0,0.000545492279343307,-0.009838390164077282,0.0174922626465559,1],[7,-0.06771289557218552,0.9976508021354675,-0.010367531329393387,0,0.9977031350135803,0.06769025325775146,-0.002519099274650216,0,-0.0018114004051312804,-0.010514290072023869,-0.9999431371688843,0,0.000545260903891176,-0.010315747000277042,0.017538316547870636,1],[7,-0.06771300733089447,0.9916784167289734,-0.10949132591485977,0,0.9977030754089355,0.06710460036993027,-0.009236186742782593,0,-0.0018119554733857512,-0.10986524075269699,-0.9939450025558472,0,0.0005451692850328982,-0.00905930157750845,0.018530679866671562,1],[7,-0.06771282851696014,0.9916787147521973,-0.10949068516492844,0,0.9977031350135803,0.06710447371006012,-0.00923547986894846,0,-0.0018113137921318412,-0.10986451804637909,-0.9939450621604919,0,0.0005454928032122552,-0.009429074823856354,0.018530670553445816,1],[7,-0.06771280616521835,0.9916787147521973,-0.10949072241783142,0,0.9977031350135803,0.06710445880889893,-0.009235480800271034,0,-0.0018113143742084503,-0.10986456274986267,-0.9939450621604919,0,0.0005454927450045943,-0.009798835031688213,0.018530672416090965,1],[7,-0.17627078294754028,0.9839187264442444,0.028843028470873833,0,0.9842755198478699,0.1765226572751999,-0.0064108422957360744,0,-0.011399195529520512,0.027259446680545807,-0.9995632767677307,0,0.0013459769543260336,-0.010210191830992699,0.017134184017777443,1],[7,-0.17627154290676117,0.9843310117721558,-0.0045419312082231045,0,0.9842754602432251,0.17620444297790527,-0.012393863871693611,0,-0.011399353854358196,-0.006655197124928236,-0.9999131560325623,0,0.0013458931352943182,-0.010185104794800282,0.017489664256572723,1],[7,-0.1762712448835373,0.983920156955719,-0.028803382068872452,0,0.9842756390571594,0.17584508657455444,-0.016732940450310707,0,-0.011398942209780216,-0.03129999712109566,-0.9994452595710754,0,0.0013458336470648646,-0.010227462276816368,0.017747150734066963,1],[7,-0.1762707680463791,0.983920156955719,-0.028803329914808273,0,0.9842756390571594,0.17584459483623505,-0.01673317141830921,0,-0.011399194598197937,-0.031299982219934464,-0.9994452595710754,0,0.0013459771871566772,-0.010533529333770275,0.01774715445935726,1],[7,-0.1762707531452179,0.9839202165603638,-0.02880331128835678,0,0.9842756390571594,0.17584463953971863,-0.01673317328095436,0,-0.011399196460843086,-0.03129996731877327,-0.9994450807571411,0,0.0013459769543260336,-0.010839596390724182,0.017747150734066963,1],[7,0.09901361912488937,-0.952404797077179,0.28830820322036743,0,-0.9950712323188782,-0.09317804127931595,0.03393030911684036,0,-0.005451394710689783,-0.29024675488471985,-0.9569362998008728,0,-0.00026004869141615927,0.004508771933615208,0.017269905656576157,1],[7,0.010903059504926205,-0.9995050430297852,0.029499739408493042,0,-0.9994235634803772,-0.009944085031747818,0.03246157988905907,0,-0.032152168452739716,-0.029836662113666534,-0.9990376234054565,0,0.000024596716684754938,-0.0015052142553031445,0.017479538917541504,1],[7,0.16706442832946777,-0.9858677983283997,0.01239804644137621,0,-0.9855737686157227,-0.16664263606071472,0.02957489714026451,0,-0.027090899646282196,-0.017160100862383842,-0.9994857311248779,0,0.0007434159051626921,-0.0048409197479486465,0.0173981711268425,1],[7,0.03953014314174652,-0.9953473806381226,-0.08786986023187637,0,-0.9992080926895142,-0.03897550702095032,-0.008019393309950829,0,0.004557308275252581,0.08811725676059723,-0.9960998892784119,0,-0.0008702180930413306,-0.009774086996912956,0.016470741480588913,1],[7,0.8390275239944458,-0.5430761575698853,-0.0331762470304966,0,-0.5396098494529724,-0.8383802771568298,0.07706708461046219,0,-0.06966762989759445,-0.046759191900491714,-0.9964735507965088,0,0.00737839424982667,-0.005239756777882576,0.017023412510752678,1],[7,0.8390264511108398,-0.54061359167099,0.061409853398799896,0,-0.5396115779876709,-0.8123509883880615,0.22114409506320953,0,-0.06966716051101685,-0.21868325769901276,-0.9733055830001831,0,0.007265742402523756,-0.0027085510082542896,0.017761211842298508,1],[7,0.8390268087387085,-0.5302828550338745,0.12179397791624069,0,-0.5396113991737366,-0.7823426723480225,0.3110613524913788,0,-0.06966588646173477,-0.32671016454696655,-0.9425533413887024,0,0.007273135241121054,-0.0012987874215468764,0.01802145689725876,1],[7,0.8390275835990906,-0.5302819609642029,0.12179262191057205,0,-0.539609968662262,-0.7823431491851807,0.31106239557266235,0,-0.06966716051101685,-0.32671040296554565,-0.9425532221794128,0,0.007378387730568647,-0.001779708662070334,0.018021443858742714,1],[7,0.8390275239944458,-0.5302819609642029,0.12179240584373474,0,-0.5396099090576172,-0.7823431491851807,0.31106245517730713,0,-0.06966736912727356,-0.3267103433609009,-0.9425532221794128,0,0.0073783923871815205,-0.002272016368806362,0.018021441996097565,1],[7,0.35862693190574646,-0.9301196932792664,-0.07914669066667557,0,-0.9331692457199097,-0.35940712690353394,-0.004649249836802483,0,-0.02412152662873268,0.07552460581064224,-0.9968522191047668,0,0.0021650411654263735,-0.010932895354926586,0.016565456986427307,1],[7,0.35862651467323303,-0.9334799647331238,0.001452594413422048,0,-0.9331693649291992,-0.35846608877182007,0.026398343965411186,0,-0.02412162348628044,-0.010822664014995098,-0.9996503591537476,0,0.0021659154444932938,-0.010073400102555752,0.017500512301921844,1],[7,0.35862675309181213,-0.9290958046913147,0.0903729647397995,0,-0.9331692457199097,-0.3543212115764618,0.060427870601415634,0,-0.02412223070859909,-0.10600432753562927,-0.9940728545188904,0,0.0021657426841557026,-0.0089247552677989,0.018434559926390648,1],[7,0.35862651467323303,-0.9290960431098938,0.0903739333152771,0,-0.933169424533844,-0.3543209433555603,0.060427226126194,0,-0.024121323600411415,-0.1060049906373024,-0.9940728545188904,0,0.00216503394767642,-0.009330564178526402,0.018434569239616394,1],[7,0.3586265444755554,-0.9290960431098938,0.0903739333152771,0,-0.9331693053245544,-0.3543209433555603,0.0604272298514843,0,-0.024121325463056564,-0.106004998087883,-0.9940729737281799,0,0.0021650337148457766,-0.009736386127769947,0.018434569239616394,1],[7,0.1409774273633957,-0.9893866181373596,-0.03520403802394867,0,-0.9900026917457581,-0.14104722440242767,-0.0005061790579929948,0,-0.004464625846594572,0.03492346033453941,-0.9993798732757568,0,0.000049741815018933266,-0.010457038879394531,0.01708958111703396,1],[7,0.14097721874713898,-0.9896255135536194,-0.027692051604390144,0,-0.9900026321411133,-0.14104676246643066,0.0005644602933898568,0,-0.004464477300643921,0.027335627004504204,-0.999616265296936,0,0.000050028647819999605,-0.0110012823715806,0.017173590138554573,1],[7,0.14097730815410614,-0.9845461249351501,0.10389497131109238,0,-0.9900026321411133,-0.13972418010234833,0.01927923411130905,0,-0.004464654717594385,-0.10557425022125244,-0.9944012761116028,0,0.00005031957334722392,-0.009236197918653488,0.018563631922006607,1],[7,0.1409776508808136,-0.9845460653305054,0.10389526933431625,0,-0.9900026321411133,-0.13972453773021698,0.019279183819890022,0,-0.004464525729417801,-0.10557454079389572,-0.994401216506958,0,0.00004974338662577793,-0.009691836312413216,0.018563631922006607,1],[7,0.1409776359796524,-0.9845461249351501,0.10389523953199387,0,-0.9900026321411133,-0.13972456753253937,0.019279176369309425,0,-0.00446452246978879,-0.10557452589273453,-0.9944012761116028,0,0.000049743128329282627,-0.01014748029410839,0.018563630059361458,1],[7,0.09093162417411804,-0.995209276676178,-0.0359097421169281,0,-0.9958570003509521,-0.09087260067462921,-0.0032758081797510386,0,-0.0000030965995847509475,0.03605884686112404,-0.9993495941162109,0,-0.000026902538593276404,-0.01056892890483141,0.01704336516559124,1],[7,0.09093157947063446,-0.9958568811416626,-0.00010650473996065557,0,-0.9958570599555969,-0.09093157202005386,-0.000006848371867818059,0,-0.000002864645693989587,0.00010668621689546853,-1,0,-0.000025467401428613812,-0.010509523563086987,0.017432479187846184,1],[7,0.09093141555786133,-0.9530864357948303,0.28871679306030273,0,-0.9958570599555969,-0.08702554553747177,0.026364348828792572,0,-0.000001765855131452554,-0.28991803526878357,-0.9570513963699341,0,-0.00002493566535122227,-0.005530199967324734,0.01989126205444336,1],[7,0.09093146026134491,-0.9530869126319885,0.28871574997901917,0,-0.9958570599555969,-0.08702527731657028,0.026365337893366814,0,-0.000002889847792175715,-0.28991708159446716,-0.9570518732070923,0,-0.00002690821020223666,-0.00587382260710001,0.01989125832915306,1],[7,0.09093143790960312,-0.9530869126319885,0.288715660572052,0,-0.9958570599555969,-0.08702526241540909,0.026365332305431366,0,-0.0000028958879738638643,-0.2899170219898224,-0.9570518136024475,0,-0.000026908362997346558,-0.006217432674020529,0.019891254603862762,1],[7,-0.09588129073381424,-0.9945815205574036,-0.04018228128552437,0,-0.9952565431594849,0.09645798057317734,-0.012663924135267735,0,0.01647120714187622,0.038777437061071396,-0.9991121888160706,0,-0.0017555694794282317,-0.010368525050580502,0.017001966014504433,1],[7,-0.09588108211755753,-0.9952505230903625,0.016825810074806213,0,-0.9952564835548401,0.0955745205283165,-0.01816572993993759,0,0.01647133380174637,-0.01848774217069149,-0.9996933937072754,0,-0.0017554934602230787,-0.009935797192156315,0.0175996832549572,1],[7,-0.09588134288787842,-0.9932098388671875,-0.06588425487279892,0,-0.9952564835548401,0.0967533066868782,-0.010166587308049202,0,0.016472075134515762,0.06459694355726242,-0.9977754950523376,0,-0.0017555563244968653,-0.011827151291072369,0.016675079241394997,1],[7,-0.09588146209716797,-0.9932097792625427,-0.06588529050350189,0,-0.9952564835548401,0.09675335139036179,-0.010165397077798843,0,0.01647099480032921,0.06459807604551315,-0.9977754950523376,0,-0.0017555677331984043,-0.012148103676736355,0.0166750717908144,1],[7,-0.09588146954774857,-0.9932098388671875,-0.06588533520698547,0,-0.9952563643455505,0.09675336629152298,-0.010165397077798843,0,0.016471000388264656,0.06459812819957733,-0.9977754950523376,0,-0.0017555677331984043,-0.012469036504626274,0.0166750717908144,1],[7,-0.9969573616981506,0.05429805815219879,0.05588321015238762,0,-0.05573606863617897,0.004219157621264458,-0.998436450958252,0,-0.05444880947470665,-0.9985160231590271,-0.0011799626518040895,0,0.0019585704430937767,0.011070522479712963,-0.00027408439200371504,1],[7,-0.9984347224235535,-0.0009138832101598382,0.05587875843048096,0,-0.05588478222489357,0.009460712783038616,-0.9983924031257629,0,0.00038376011070795357,-0.9999549984931946,-0.00949699617922306,0,0.001519008306786418,0.008060196414589882,-0.0002070561604341492,1],[7,-0.9976024031639099,0.055045854300260544,0.04188648238778114,0,-0.06916960328817368,-0.7961423397064209,-0.6011428833007812,0,0.0002571782097220421,-0.6026003360748291,0.7980430722236633,0,0.0015161180635914207,0.0032395559828728437,-0.004758048336952925,1],[7,-0.996324896812439,0.0825648158788681,0.02269679680466652,0,-0.08343543112277985,-0.9956876635551453,-0.04055274650454521,0,0.019250640645623207,-0.042297519743442535,0.9989199042320251,0,0.0014025020645931363,-0.0023561904672533274,-0.004197515081614256,1],[7,-0.9963252544403076,0.08256463706493378,0.02267676219344139,0,-0.08343442529439926,-0.9956876039505005,-0.040552664548158646,0,0.019230708479881287,-0.042295753955841064,0.9989200830459595,0,0.0014025864657014608,-0.003349988954141736,-0.004197480622678995,1],[7,-0.9963251352310181,0.08256491273641586,0.022679567337036133,0,-0.08343479782342911,-0.9956876635551453,-0.04055270552635193,0,0.01923348754644394,-0.042296044528484344,0.9989200234413147,0,0.001402574242092669,-0.004343781154602766,-0.004197486210614443,1],[7,-0.9969313740730286,-0.05477658659219742,0.055880770087242126,0,-0.05620255321264267,0.004352748394012451,-0.9984098672866821,0,0.05444611981511116,-0.9984890818595886,-0.007417991291731596,0,-0.0019584784749895334,0.011072209104895592,-0.00022943025396671146,1],[7,-0.9984350204467773,-0.0003960008907597512,0.05587971583008766,0,-0.05587967857718468,0.013938436284661293,-0.9983400702476501,0,-0.00038353150011971593,-0.9999028444290161,-0.0139387845993042,0,-0.0015188410179689527,0.00806110817939043,-0.00017686585488263518,1],[7,-0.9990723133087158,0.0347965732216835,0.025272808969020844,0,-0.04300542175769806,-0.8055598139762878,-0.590951681137085,0,-0.00020433498139027506,-0.59149169921875,0.8063110113143921,0,-0.0015164315700531006,0.00317756668664515,-0.004799260757863522,1],[7,-0.9993915557861328,0.02912815846502781,-0.019068008288741112,0,-0.028291672468185425,-0.9986846446990967,-0.042755793780088425,0,-0.02028828114271164,-0.04219040274620056,0.9989034533500671,0,-0.001396470470353961,-0.0024171776603907347,-0.004201244097203016,1],[7,-0.9993919134140015,0.02912803553044796,-0.01904451474547386,0,-0.028292525559663773,-0.9986844658851624,-0.04275665432214737,0,-0.020264839753508568,-0.04219193384051323,0.9989039897918701,0,-0.0013965691905468702,-0.0034133868757635355,-0.004201216157525778,1],[7,-0.999392032623291,0.029127588495612144,-0.019036758691072464,0,-0.02829241193830967,-0.9986847639083862,-0.04275612533092499,0,-0.02025705948472023,-0.04219163954257965,0.9989039897918701,0,-0.0013966005062684417,-0.004409604240208864,-0.004201204050332308,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[23,"Material",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":2,"HAS_EXPORTED_METALLIC":true,"USE_ALBEDO_MAP":true}],[[[{"shininessExponent":25,"emissiveScale":1,"metallic":0,"specularFactor":0.25,"transparencyFactor":0},"mainColor",8,[4,4293388263],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[9,8],[24,4]],[[{"name":"try_again","rect":{"x":0,"y":0,"width":431,"height":172},"offset":{"x":0,"y":0},"originalSize":{"width":431,"height":172},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-215.5,-86,0,215.5,-86,0,-215.5,86,0,215.5,86,0],"indexes":[0,1,2,2,1,3],"uv":[0,172,431,172,0,0,431,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-215.5,"y":-86,"z":0},"maxPos":{"x":215.5,"y":86,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[7],[25]],[[{"name":"handle_2","rect":{"x":0,"y":6,"width":288,"height":139},"offset":{"x":0,"y":6},"originalSize":{"width":288,"height":163},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-144,-69.5,0,144,-69.5,0,-144,69.5,0,144,69.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,157,288,157,0,18,288,18],"nuv":[0,0.11042944785276074,1,0.11042944785276074,0,0.9631901840490797,1,0.9631901840490797],"minPos":{"x":-144,"y":-69.5,"z":0},"maxPos":{"x":144,"y":69.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[7],[26]],[[{"name":"default_btn_normal","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"vertices":{"rawPosition":[-20,-20,0,20,-20,0,-20,20,0,20,20,0],"indexes":[0,1,2,2,1,3],"uv":[0,40,40,40,0,0,40,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-20,"y":-20,"z":0},"maxPos":{"x":20,"y":20,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[7],[27]],[[{"name":"hand","rect":{"x":0,"y":5,"width":323,"height":305},"offset":{"x":-56,"y":61.5},"originalSize":{"width":435,"height":438},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-161.5,-152.5,0,161.5,-152.5,0,-161.5,152.5,0,161.5,152.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,433,323,433,0,128,323,128],"nuv":[0,0.2922374429223744,0.7425287356321839,0.2922374429223744,0,0.9885844748858448,0.7425287356321839,0.9885844748858448],"minPos":{"x":-161.5,"y":-152.5,"z":0},"maxPos":{"x":161.5,"y":152.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[7],[28]],[[{"name":"handle_1","rect":{"x":0,"y":0,"width":312,"height":458},"offset":{"x":0,"y":0},"originalSize":{"width":312,"height":458},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-156,-229,0,156,-229,0,-156,229,0,156,229,0],"indexes":[0,1,2,2,1,3],"uv":[0,458,312,458,0,0,312,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-156,"y":-229,"z":0},"maxPos":{"x":156,"y":229,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[7],[29]],[[{"name":"default_btn_pressed","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"vertices":{"rawPosition":[-20,-20,0,20,-20,0,-20,20,0,20,20,0],"indexes":[0,1,2,2,1,3],"uv":[0,40,40,40,0,0,40,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-20,"y":-20,"z":0},"maxPos":{"x":20,"y":20,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[7],[30]],[[[3,".bin",3999310774,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7296,"length":1008,"count":252,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7296,"count":152,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.011250319890677929,-0.01125031802803278,-0.02503007836639881],"maxPosition",8,[1,0.011250319890677929,0.011250322684645653,-0.007788976654410362]]],-1],0,0,[],[],[]],[[[3,".bin",512309950,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14976,"length":2640,"count":660,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14976,"count":312,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.012455386109650135,-0.012455387972295284,-0.012455387972295284],"maxPosition",8,[1,0.012455386109650135,0.012455387972295284,0.012455387972295284]]],-1],0,0,[],[],[]],[[[23,"Axes",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":2,"HAS_EXPORTED_METALLIC":true,"USE_ALBEDO_MAP":true}],[[[{"shininessExponent":25,"emissiveScale":1,"metallic":0,"specularFactor":0.25,"transparencyFactor":0},"mainColor",8,[4,4293388263],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[9,8],[31,4]],[[[3,".bin",4062596031,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":25440,"length":3216,"count":804,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":25440,"count":530,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.01245538517832756,-0.012455389834940434,-0.012455387972295284],"maxPosition",8,[1,0.01245538704097271,0.01245538704097271,0.012455387972295284]]],-1],0,0,[],[],[]],[[[3,".bin",2841477240,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":89664,"length":20832,"count":5208,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":89664,"count":1868,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.011138107627630234,-0.00454903207719326,-0.01098992582410574],"maxPosition",8,[1,0.0111388573423028,0.008454568684101105,0.010987704619765282]]],-1],0,0,[],[],[]],[[[3,".bin",2841477240,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":89664,"length":20832,"count":5208,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":89664,"count":1868,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.011138107627630234,-0.00454903207719326,-0.01098992582410574],"maxPosition",8,[1,0.0111388573423028,0.008454568684101105,0.010987704619765282]]],-1],0,0,[],[],[]],[[[3,".bin",434586768,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":20208,"length":7824,"count":1956,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":20208,"count":421,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.011439939960837364,-0.01629086211323738,-0.016290906816720963],"maxPosition",8,[1,4.76837147544984e-9,0.016290869563817978,0.016290824860334396]]],-1],0,0,[],[],[]],[[[3,".bin",3999310774,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7296,"length":1008,"count":252,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7296,"count":152,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.011250319890677929,-0.01125031802803278,-0.02503007836639881],"maxPosition",8,[1,0.011250319890677929,0.011250322684645653,-0.007788976654410362]]],-1],0,0,[],[],[]],[[[3,".bin",512309950,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14976,"length":2640,"count":660,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14976,"count":312,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.012455386109650135,-0.012455387972295284,-0.012455387972295284],"maxPosition",8,[1,0.012455386109650135,0.012455387972295284,0.012455387972295284]]],-1],0,0,[],[],[]],[[[3,".bin",3009020589,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":89664,"length":20832,"count":5208,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":89664,"count":1868,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.011138856410980225,-0.008454568684101105,-0.01098992582410574],"maxPosition",8,[1,0.011138108558952808,0.0045490325428545475,0.010987704619765282]]],-1],0,0,[],[],[]],[[[23,"wheel",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":2,"HAS_EXPORTED_METALLIC":true,"USE_ALBEDO_MAP":true}],[[[{"shininessExponent":25,"emissiveScale":1,"metallic":0,"specularFactor":0.25,"transparencyFactor":0},"mainColor",8,[4,4293388263],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[9,8],[32,4]],[[[3,".bin",3009020589,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":89664,"length":20832,"count":5208,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":89664,"count":1868,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.011138856410980225,-0.008454568684101105,-0.01098992582410574],"maxPosition",8,[1,0.011138108558952808,0.0045490325428545475,0.010987704619765282]]],-1],0,0,[],[],[]],[[[53,"Coin"],[58,"Coin",[-5],[[76,-2,[22,"84cjOf/nlPyYVpF61gQBlC"]],[77,2,-3,[22,"28ipuFcB9EvIUNDcGZE8ku"]],[81,0.328,0.183,2,-4,[22,"9dEuXxWa9Do5pndtWWvs2M"],2]],[0,"8fS61IWEVIiJ6GvZ2h+jxF",-1,0],[1,-35.821,3.845,0],[1,3,3,3]],[59,"Coin",1,[[82,-6,[22,"9cTeTjqt9NUJVi/qZS83Ax"],[0],[2],1]],[0,"e61Uy3TyZPNJ2LZmcwGPX0",1,0],[1,100,100,100]]],0,[0,4,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,0,2,0,11,1,6],[0,0,0],[-1,1,2],[33,34,0]],[[{"name":"download","rect":{"x":0,"y":0,"width":549,"height":150},"offset":{"x":0,"y":0},"originalSize":{"width":549,"height":150},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-274.5,-75,0,274.5,-75,0,-274.5,75,0,274.5,75,0],"indexes":[0,1,2,2,1,3],"uv":[0,150,549,150,0,0,549,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-274.5,"y":-75,"z":0},"maxPos":{"x":274.5,"y":75,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[7],[35]],[[{"name":"coin","rect":{"x":0,"y":0,"width":91,"height":90},"offset":{"x":0,"y":0},"originalSize":{"width":91,"height":90},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-45.5,-45,0,45.5,-45,0,-45.5,45,0,45.5,45,0],"indexes":[0,1,2,2,1,3],"uv":[0,90,91,90,0,0,91,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-45.5,"y":-45,"z":0},"maxPos":{"x":45.5,"y":45,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[7],[36]],[[[3,".bin",1169577517,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0057139587588608265,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713882390409708,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",1325495339,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005713920574635267,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.0057139587588608265,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",1010002786,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005713920574635267,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713920574635267,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",1169577517,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0057139587588608265,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713882390409708,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",1169577517,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0057139587588608265,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713882390409708,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",1169577517,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0057139587588608265,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713882390409708,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",1457666399,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.00571392523124814,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.00571392523124814,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",1457666399,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.00571392523124814,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.00571392523124814,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",1087948833,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1920,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1920,"count":40,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005713920574635267,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713920574635267,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",886902427,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5664,"length":864,"count":216,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5664,"count":118,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3811908960342407,-0.04228263720870018,-0.042704466730356216],"maxPosition",8,[1,0.3756478428840637,0.045616813004016876,0.006066021975129843]]],-1],0,0,[],[],[]],[[[3,".bin",1169577517,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0057139587588608265,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713882390409708,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",1010002786,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005713920574635267,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713920574635267,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",1087948833,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1920,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1920,"count":40,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005713920574635267,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713920574635267,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",1087948833,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1920,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1920,"count":40,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005713920574635267,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713920574635267,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",1087948833,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1920,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1920,"count":40,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005713920574635267,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713920574635267,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",896750300,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005714035127311945,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713882390409708,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",2005397384,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1920,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1920,"count":40,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005713920574635267,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713920574635267,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",1087948833,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1920,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1920,"count":40,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005713920574635267,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713920574635267,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",507232470,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005713996943086386,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713844206184149,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",896750300,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005714035127311945,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713882390409708,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",2005397384,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1920,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1920,"count":40,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005713920574635267,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713920574635267,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",1010002786,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005713920574635267,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713920574635267,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",3460492294,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1920,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1920,"count":40,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005713939666748047,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713901482522488,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",3779154878,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1920,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1920,"count":40,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005713939666748047,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713901482522488,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",3489453574,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":21120,"length":5952,"count":1488,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":21120,"count":440,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.004550490528345108,-0.0432131253182888,-0.01454436220228672],"maxPosition",8,[1,0.004550490528345108,0.043213147670030594,0.09131286293268204]]],-1],0,0,[],[],[]],[[[3,".bin",1010002786,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005713920574635267,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713920574635267,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",2005397384,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1920,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1920,"count":40,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005713920574635267,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713920574635267,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",1010002786,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005713920574635267,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713920574635267,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",1169577517,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0057139587588608265,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713882390409708,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",1169577517,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0057139587588608265,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713882390409708,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",3639535140,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0057139587588608265,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.0057139587588608265,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",1087948833,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1920,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1920,"count":40,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005713920574635267,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713920574635267,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",3179724194,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1920,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1920,"count":40,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005713935010135174,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713920574635267,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",1010002786,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005713920574635267,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713920574635267,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",1169577517,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0057139587588608265,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713882390409708,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",1010002786,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005713920574635267,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713920574635267,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",1087948833,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1920,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1920,"count":40,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005713920574635267,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713920574635267,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",4249753452,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1920,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1920,"count":40,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.00571392523124814,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.00571392523124814,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",896750300,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005714035127311945,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713882390409708,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",3639535140,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0057139587588608265,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.0057139587588608265,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",3779154878,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1920,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1920,"count":40,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005713939666748047,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713901482522488,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",1669007096,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005713882390409708,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.0057139587588608265,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",2378847656,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":8736,"length":1248,"count":312,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8736,"count":182,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3811908960342407,-0.04228263720870018,-0.042704466730356216],"maxPosition",8,[1,1.1521592140197754,0.045616813004016876,0.006066021975129843]]],-1],0,0,[],[],[]],[[[3,".bin",2486035898,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1920,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1920,"count":40,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0057139587588608265,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713882390409708,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",1010002786,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005713920574635267,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713920574635267,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",1010002786,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005713920574635267,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713920574635267,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",3639535140,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0057139587588608265,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.0057139587588608265,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[23,"Material",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":2,"HAS_EXPORTED_METALLIC":true,"USE_ALBEDO_MAP":true}],[[[{"shininessExponent":25,"emissiveScale":1,"metallic":0,"specularFactor":0.25,"transparencyFactor":0},"mainColor",8,[4,4293388263],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[9,8],[37,4]],[[[3,".bin",1669007096,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005713882390409708,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.0057139587588608265,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",896750300,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005714035127311945,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713882390409708,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",240970307,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1920,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1920,"count":40,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005713920574635267,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713930353522301,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",1010002786,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005713920574635267,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713920574635267,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",896750300,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005714035127311945,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713882390409708,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",1669007096,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005713882390409708,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.0057139587588608265,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",3639535140,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0057139587588608265,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.0057139587588608265,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",4249753452,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1920,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1920,"count":40,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.00571392523124814,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.00571392523124814,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",4249753452,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1920,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1920,"count":40,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.00571392523124814,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.00571392523124814,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",2281006767,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1920,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1920,"count":40,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005713901482522488,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713939666748047,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",1087948833,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1920,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1920,"count":40,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005713920574635267,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713920574635267,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",3639535140,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0057139587588608265,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.0057139587588608265,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",2005397384,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1920,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1920,"count":40,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005713920574635267,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713920574635267,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",1669007096,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005713882390409708,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.0057139587588608265,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",3639535140,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.0057139587588608265,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.0057139587588608265,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[3,".bin",896750300,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1728,"length":240,"count":60,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1728,"count":36,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.005714035127311945,-0.029127974063158035,-0.00571392523124814],"maxPosition",8,[1,0.005713882390409708,0.05825594812631607,0.00571392523124814]]],-1],0,0,[],[],[]],[[[47,"builtin-sprite-renderer",[{"hash":2322960945,"name":"builtin-sprite-renderer|spriteRender-vs:vert|spriteRender-fs:frag","blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_debug_view_mode;\n  mediump vec4 cc_debug_view_composite_pack_1;\n  mediump vec4 cc_debug_view_composite_pack_2;\n  mediump vec4 cc_debug_view_composite_pack_3;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nin vec3 a_position;\nin vec2 a_texCoord;\nout vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * cc_matWorld * pos;\n  uv0 = vec2(a_texCoord.x, 1.0 - a_texCoord.y);\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nin vec2 uv0;\nuniform sampler2D cc_spriteTexture;\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  o *= texture(cc_spriteTexture, uv0);\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matViewProj;\nuniform highp mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nvarying vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * cc_matWorld * pos;\n  uv0 = vec2(a_texCoord.x, 1.0 - a_texCoord.y);\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvarying vec2 uv0;\nuniform sampler2D cc_spriteTexture;\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  o *= texture2D(cc_spriteTexture, uv0);\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":[]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":54,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":0}},"defines":[]}],[{"name":"default","passes":[{"program":"builtin-sprite-renderer|spriteRender-vs:vert|spriteRender-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":true,"depthWrite":false}}]}]]],0,0,[],[],[]],[[{"name":"logo","rect":{"x":78,"y":38,"width":366,"height":202},"offset":{"x":2.5,"y":153.5},"originalSize":{"width":517,"height":585},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-183,-101,0,183,-101,0,-183,101,0,183,101,0],"indexes":[0,1,2,2,1,3],"uv":[78,547,444,547,78,345,444,345],"nuv":[0.15087040618955513,0.5897435897435898,0.8588007736943907,0.5897435897435898,0.15087040618955513,0.935042735042735,0.8588007736943907,0.935042735042735],"minPos":{"x":-183,"y":-101,"z":0},"maxPos":{"x":183,"y":101,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[7],[38]],[[{"name":"cross","rect":{"x":0,"y":0,"width":315,"height":315},"offset":{"x":0,"y":0},"originalSize":{"width":315,"height":315},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-157.5,-157.5,0,157.5,-157.5,0,-157.5,157.5,0,157.5,157.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,315,315,315,0,0,315,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-157.5,"y":-157.5,"z":0},"maxPos":{"x":157.5,"y":157.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[7],[39]],[[{"name":"back_plane","rect":{"x":1,"y":1,"width":413,"height":197},"offset":{"x":0,"y":0},"originalSize":{"width":415,"height":199},"rotated":false,"capInsets":[180,99,184,98],"vertices":{"rawPosition":[-206.5,-98.5,0,206.5,-98.5,0,-206.5,98.5,0,206.5,98.5,0],"indexes":[0,1,2,2,1,3],"uv":[1,198,414,198,1,1,414,1],"nuv":[0.0024096385542168677,0.005025125628140704,0.9975903614457832,0.005025125628140704,0.0024096385542168677,0.9949748743718593,0.9975903614457832,0.9949748743718593],"minPos":{"x":-206.5,"y":-98.5,"z":0},"maxPos":{"x":206.5,"y":98.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[7],[40]],[[[3,".bin",3549801555,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":12528,"length":3456,"count":864,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":12528,"count":261,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.003385390155017376,-0.003385390155017376,-0.0006163900252431631],"maxPosition",8,[1,0.003385390155017376,0.003385390155017376,0.0006163900252431631]]],-1],0,0,[],[],[]],[[[23,"Material",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":2,"HAS_EXPORTED_METALLIC":true,"USE_ALBEDO_MAP":true}],[[[{"shininessExponent":25,"emissiveScale":1,"metallic":0,"specularFactor":0.25,"transparencyFactor":0},"mainColor",8,[4,4293388263],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[9,8],[41,4]],[[{"name":"default_btn_disabled","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"vertices":{"rawPosition":[-20,-20,0,20,-20,0,-20,20,0,20,20,0],"indexes":[0,1,2,2,1,3],"uv":[0,40,40,40,0,0,40,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-20,"y":-20,"z":0},"maxPos":{"x":20,"y":20,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[7],[42]],[[[83,"game"],[39,"Wood_Road",[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62],[1,54.43650436401367,-7.948573589324951,1.6467156410217285],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,100,100,100],[1,-90.00000965934633,0,0]],[40,"Coins",33554432,"4aD36hYkpNnaNoa1fvYVeK",[-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77],[[84,-63]],[1,0,8.188,0]],[40,"Canvas",33554432,"77BdHyKJhJe4LrVKn9MNcW",[-82,-83,-84,-85,-86,-87],[[19,-78,[5,1920,1080]],[86,-80,-79],[87,45,-1.1368683772161603e-13,-1.1368683772161603e-13,-81]],[1,960,539.9999999999999,0]],[39,"Machine_V1",[-88,-89,-90,-91,-92,-93,-94,-95],[1,0,-0.002,0.003],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,100,100,100],[1,-90.00000965934633,0,0]],[21,"DownloadButton",33554432,3,[[33,-96,[5,549,150],[0,0,0]],[88,12,-97],[49,1,-98,50],[50,1,-101,[[34,"6ab233X1vFDhrFdFbuZOHQz","onDownload",-100]],-99,51,52,53,54],[96,-102],[97,-103]],[1,-960,-540,0]],[41,"Fail",33554432,3,[-109,-110,-111],[[19,-104,[5,1960,1120]],[48,45,-20,-20,-20,-20,100,100,-105],[98,0.5,0.5,0.5,-108,-107,-106]],[1,0,0,-1.052]],[99,"game",[-127,2,-128,-129,-130,-131,3],[71,"ab62c84e-4891-4290-8fa2-c8fe781def6e",[],[-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126]],[100,[101,2000,0.5208,[2,0.26197,0.728228,0.997713,0],[2,0.211485,0.698707,0.988792,0],[2,0,0,0,0.5208],[2,0,0,0,0]],[102,[4,4283190348]],[103,false,256,257],[104],[105,[1,0,0,0],[1,0,0,0]]]],[67,"Handle",33554432,3,[-136,-137,-138],[[-132,[89,36,120,116,-133],-134,-135],1,4,1,1],[1,707.1335,-229.7515,0]],[60,"Machine","96l2OGcQ1ML4KUpocUz0vB",7,[4,-143],[[106,6,-141,-140,-139],[78,false,-142,[1,1,5,1],[1,1,1,5]]],[1,-13.504,0,0]],[41,"CoinContainer",33554432,3,[-146,-147,-148],[[85,-144,[0,1,0.5]],[90,33,16,16,-145]],[1,944,474,0]],[45,"RetryButton",33554432,6,[[[19,-149,[5,431,172]],[49,1,-150,61],[50,1,-152,[[34,"70a50C18/tHWL4YgLKcDpfb","onDownload",6]],-151,62,63,64,65],-153],4,4,4,1],[1,0,-530.3059999999998,0]],[61,"Background","1ctuZkXjpC2Iwk4C9bTTxL",7,[-155,-156,-157],[[27,-154,[20],21]],[1,-43.009,1.732,-19.907],[1,12,12,1]],[62,"booster",4,[-162],[[4,-158,[35],[2],36],[79,-159],[107,-161,-160]],[1,-0.03604203090071678,0.00003815900709014386,0.03388068079948425]],[30,"wheel_front.001",[[4,-163,[37],[2],38],[28,-164],[26,0.01,0.012,-165,[1,0,-0.002,0],39],[25,false,-166,[1,0,0,0],[1,0,0,0]]],[1,2.38418573772492e-9,0.020404228940606117,0]],[30,"wheel_front",[[4,-167,[40],[2],41],[28,-168],[26,0.01,0.011,-169,[1,0,0.002,0],42],[25,false,-170,[1,0,0,0],[1,0,0,0]]],[1,2.38418573772492e-9,-0.020404228940606117,0]],[30,"wheel_back",[[4,-171,[43],[2],44],[28,-172],[26,0.01,0.012,-173,[1,0,-0.002,0],45],[25,false,-174,[1,0,0,0],[1,0,0,0]]],[1,0,0.020404228940606117,0]],[63,"wheel_back",[[4,-175,[46],[2],47],[28,-176],[26,0.01,0.011,-177,[1,0,0.002,0],48],[25,false,-178,[1,0,0,0],[1,0,0,0]]],[1,0,-0.020404228940606117,0],[3,0,0.015707317311820675,0,0.9998766324816606],[1,0,1.8,0]],[21,"CoinLabel",33554432,10,[[19,-179,[5,66.726,80.545]],[108,"7",0,80,80,80,2,true,-180],[109,-181],[110,-182]],[1,-49.22900000000004,2.8789999999999054,0]],[31,"bg",33554432,6,[[19,-183,[5,2008,1168]],[92,1,0,-184,[4,2617245695],58],[48,45,-24,-24,-24,-24,1080,1920,-185],[95,-186,[[34,"70a50C18/tHWL4YgLKcDpfb","onDownload",6]],59]]],[5,"Road_Block_Wood.001",1,[[4,-187,[74],[2],75],[6,-188,[1,0,0.014563987031579018,0],[1,0.01142785046249628,0.0873839221894741,0.01142785046249628],76],[7,2,-189],[8,-190]],[1,-0.40454602241516113,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.002",1,[[4,-191,[77],[2],78],[6,-192,[1,0,0.014563987031579018,0],[1,0.01142785046249628,0.0873839221894741,0.01142785046249628],79],[7,2,-193],[8,-194]],[1,-0.3908326029777527,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.003",1,[[4,-195,[80],[2],81],[6,-196,[1,0,0.014563987031579018,0],[1,0.01142785046249628,0.0873839221894741,0.01142785046249628],82],[7,2,-197],[8,-198]],[1,-0.37711918354034424,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.004",1,[[4,-199,[83],[2],84],[6,-200,[1,0,0.014563987031579018,0],[1,0.01142785046249628,0.0873839221894741,0.01142785046249628],85],[7,2,-201],[8,-202]],[1,-0.3634057641029358,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.005",1,[[4,-203,[86],[2],87],[6,-204,[1,0,0.014563987031579018,0],[1,0.01142785046249628,0.0873839221894741,0.01142785046249628],88],[7,2,-205],[8,-206]],[1,-0.34969231486320496,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.006",1,[[4,-207,[89],[2],90],[6,-208,[1,4.889443516731262e-9,0.014563987031579018,0],[1,0.011427850928157568,0.0873839221894741,0.01142785046249628],91],[7,2,-209],[8,-210]],[1,-0.3359789252281189,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.007",1,[[4,-211,[92],[2],93],[6,-212,[1,-7.2177499532699585e-9,0.014563987031579018,0],[1,0.011427855584770441,0.0873839221894741,0.01142785046249628],94],[7,2,-213],[8,-214]],[1,-0.32226547598838806,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.008",1,[[4,-215,[95],[2],96],[6,-216,[1,0,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],97],[7,2,-217],[8,-218]],[1,-0.3085520565509796,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.009",1,[[4,-219,[98],[2],99],[6,-220,[1,0,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],100],[7,2,-221],[8,-222]],[1,-0.29483863711357117,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.010",1,[[4,-223,[101],[2],102],[6,-224,[1,0,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],103],[7,2,-225],[8,-226]],[1,-0.2811252176761627,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.011",1,[[4,-227,[104],[2],105],[6,-228,[1,-1.909211277961731e-8,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],106],[7,2,-229],[8,-230]],[1,-0.2674117982387543,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.012",1,[[4,-231,[107],[2],108],[6,-232,[1,0,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],109],[7,2,-233],[8,-234]],[1,-0.2536983788013458,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.013",1,[[4,-235,[110],[2],111],[6,-236,[1,0,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],112],[7,2,-237],[8,-238]],[1,-0.23998497426509857,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.014",1,[[4,-239,[113],[2],114],[6,-240,[1,0,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],115],[7,2,-241],[8,-242]],[1,-0.22627155482769012,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.015",1,[[4,-243,[116],[2],117],[6,-244,[1,0,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],118],[7,2,-245],[8,-246]],[1,-0.21255813539028168,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.016",1,[[4,-247,[119],[2],120],[6,-248,[1,0,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],121],[7,2,-249],[8,-250]],[1,-0.19884471595287323,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.017",1,[[4,-251,[122],[2],123],[6,-252,[1,-1.909211277961731e-8,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],124],[7,2,-253],[8,-254]],[1,-0.18513129651546478,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.018",1,[[4,-255,[125],[2],126],[6,-256,[1,0,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],127],[7,2,-257],[8,-258]],[1,-0.17141789197921753,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.019",1,[[4,-259,[128],[2],129],[6,-260,[1,-1.909211277961731e-8,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],130],[7,2,-261],[8,-262]],[1,-0.15770447254180908,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.020",1,[[4,-263,[131],[2],132],[6,-264,[1,-3.818422555923462e-8,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],133],[7,2,-265],[8,-266]],[1,-0.14399100840091705,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.021",1,[[4,-267,[134],[2],135],[6,-268,[1,0,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],136],[7,2,-269],[8,-270]],[1,-0.1302776336669922,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.022",1,[[4,-271,[137],[2],138],[6,-272,[1,1.909211277961731e-8,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],139],[7,2,-273],[8,-274]],[1,-0.11656425148248672,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.023",1,[[4,-275,[140],[2],141],[6,-276,[1,0,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],142],[7,2,-277],[8,-278]],[1,-0.10285080224275589,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.024",1,[[4,-279,[143],[2],144],[6,-280,[1,0,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],145],[7,2,-281],[8,-282]],[1,-0.08913738280534744,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.025",1,[[4,-283,[146],[2],147],[6,-284,[1,-3.818422555923462e-8,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],148],[7,2,-285],[8,-286]],[1,-0.07542392611503601,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.026",1,[[4,-287,[149],[2],150],[6,-288,[1,-3.818422555923462e-8,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],151],[7,2,-289],[8,-290]],[1,-0.06171051040291786,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.027",1,[[4,-291,[152],[2],153],[6,-292,[1,-3.818422555923462e-8,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],154],[7,2,-293],[8,-294]],[1,-0.04799709469079971,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.028",1,[[4,-295,[155],[2],156],[6,-296,[1,0,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],157],[7,2,-297],[8,-298]],[1,-0.03428371250629425,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.029",1,[[4,-299,[158],[2],159],[6,-300,[1,0,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],160],[7,2,-301],[8,-302]],[1,-0.0205702967941761,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.030",1,[[4,-303,[161],[2],162],[6,-304,[1,0,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],163],[7,2,-305],[8,-306]],[1,-0.006856880150735378,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.031",1,[[4,-307,[164],[2],165],[6,-308,[1,3.818422555923462e-8,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],166],[7,2,-309],[8,-310]],[1,0.006856498774141073,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.032",1,[[4,-311,[167],[2],168],[6,-312,[1,0,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],169],[7,2,-313],[8,-314]],[1,0.020569954067468643,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.033",1,[[4,-315,[170],[2],171],[6,-316,[1,-7.636845111846924e-8,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],172],[7,2,-317],[8,-318]],[1,0.03428344801068306,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.034",1,[[4,-319,[173],[2],174],[6,-320,[1,-3.818422555923462e-8,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],175],[7,2,-321],[8,-322]],[1,0.047996826469898224,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.035",1,[[4,-323,[176],[2],177],[6,-324,[1,-3.818422555923462e-8,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],178],[7,2,-325],[8,-326]],[1,0.06171024218201637,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.036",1,[[4,-327,[179],[2],180],[6,-328,[1,0,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],181],[7,2,-329],[8,-330]],[1,0.07542362064123154,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.037",1,[[4,-331,[182],[2],183],[6,-332,[1,-3.818422555923462e-8,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],184],[7,2,-333],[8,-334]],[1,0.08913707733154297,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.038",1,[[4,-335,[185],[2],186],[6,-336,[1,0,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],187],[7,2,-337],[8,-338]],[1,0.10285037755966187,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.039",1,[[4,-339,[188],[2],189],[6,-340,[1,0,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],190],[7,2,-341],[8,-342]],[1,0.11656390875577927,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.040",1,[[4,-343,[191],[2],192],[6,-344,[1,3.818422555923462e-8,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],193],[7,2,-345],[8,-346]],[1,0.13027729094028473,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.041",1,[[4,-347,[194],[2],195],[6,-348,[1,3.818422555923462e-8,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],196],[7,2,-349],[8,-350]],[1,0.1439906656742096,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.042",1,[[4,-351,[197],[2],198],[6,-352,[1,0,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],199],[7,2,-353],[8,-354]],[1,0.15770405530929565,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.043",1,[[4,-355,[200],[2],201],[6,-356,[1,0,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],202],[7,2,-357],[8,-358]],[1,0.17141757905483246,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.044",1,[[4,-359,[203],[2],204],[6,-360,[1,3.818422555923462e-8,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],205],[7,2,-361],[8,-362]],[1,0.18513095378875732,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.045",1,[[4,-363,[206],[2],207],[6,-364,[1,-3.818422555923462e-8,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],208],[7,2,-365],[8,-366]],[1,0.19884434342384338,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.046",1,[[4,-367,[209],[2],210],[6,-368,[1,-3.818422555923462e-8,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],211],[7,2,-369],[8,-370]],[1,0.2125578671693802,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.047",1,[[4,-371,[212],[2],213],[6,-372,[1,0,0.014563987031579018,0],[1,0.011427841149270535,0.0873839221894741,0.01142785046249628],214],[7,2,-373],[8,-374]],[1,0.22627124190330505,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.048",1,[[4,-375,[215],[2],216],[6,-376,[1,1.909211277961731e-8,0.014563987031579018,0],[1,0.011427879333496094,0.0873839221894741,0.01142785046249628],217],[7,2,-377],[8,-378]],[1,0.2399846315383911,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.049",1,[[4,-379,[218],[2],219],[6,-380,[1,0,0.014563987031579018,0],[1,0.011427917517721653,0.0873839221894741,0.01142785046249628],220],[7,2,-381],[8,-382]],[1,0.2536979913711548,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.050",1,[[4,-383,[221],[2],222],[6,-384,[1,-7.636845111846924e-8,0.014563987031579018,0],[1,0.011427917517721653,0.0873839221894741,0.01142785046249628],223],[7,2,-385],[8,-386]],[1,0.2674115300178528,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.051",1,[[4,-387,[224],[2],225],[6,-388,[1,-7.636845111846924e-8,0.014563987031579018,0],[1,0.011427917517721653,0.0873839221894741,0.01142785046249628],226],[7,2,-389],[8,-390]],[1,0.2811250686645508,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.052",1,[[4,-391,[227],[2],228],[6,-392,[1,0,0.014563987031579018,0],[1,0.011427917517721653,0.0873839221894741,0.01142785046249628],229],[7,2,-393],[8,-394]],[1,0.29483845829963684,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.053",1,[[4,-395,[230],[2],231],[6,-396,[1,-7.636845111846924e-8,0.014563987031579018,0],[1,0.011427917517721653,0.0873839221894741,0.01142785046249628],232],[7,2,-397],[8,-398]],[1,0.30855196714401245,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.054",1,[[4,-399,[233],[2],234],[6,-400,[1,-7.636845111846924e-8,0.014563987031579018,0],[1,0.011427917517721653,0.0873839221894741,0.01142785046249628],235],[7,2,-401],[8,-402]],[1,0.3222653567790985,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.055",1,[[4,-403,[236],[2],237],[6,-404,[1,-7.636845111846924e-8,0.014563987031579018,0],[1,0.011427917517721653,0.0873839221894741,0.01142785046249628],238],[7,2,-405],[8,-406]],[1,0.3359788954257965,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.056",1,[[4,-407,[239],[2],240],[6,-408,[1,0,0.014563987031579018,0],[1,0.011427917517721653,0.0873839221894741,0.01142785046249628],241],[7,2,-409],[8,-410]],[1,0.3496922552585602,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.057",1,[[4,-411,[242],[2],243],[6,-412,[1,0,0.014563987031579018,0],[1,0.011427917517721653,0.0873839221894741,0.01142785046249628],244],[7,2,-413],[8,-414]],[1,0.36340564489364624,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.058",1,[[4,-415,[245],[2],246],[6,-416,[1,0,0.014563987031579018,0],[1,0.011427917517721653,0.0873839221894741,0.01142785046249628],247],[7,2,-417],[8,-418]],[1,0.37711918354034424,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.059",1,[[4,-419,[248],[2],249],[6,-420,[1,-7.636845111846924e-8,0.014563987031579018,0],[1,0.011427917517721653,0.0873839221894741,0.01142785046249628],250],[7,2,-421],[8,-422]],[1,0.39083272218704224,-9.53674295089968e-9,0.07429525256156921]],[5,"Road_Block_Wood.060",1,[[4,-423,[251],[2],252],[6,-424,[1,0,0.014563987031579018,0],[1,0.011427917517721653,0.0873839221894741,0.01142785046249628],253],[80,2,-425,[1,1,3,1]],[112,-426]],[1,0.4045460820198059,-9.53674295089968e-9,0.07429525256156921]],[66,"Box.001",4,[[[4,-427,[28],[2],29],[46,false,-428,[1,2,1,-1]],-429],4,4,1],[1,0.025565223768353462,0.000027339474399923347,0.033094488084316254]],[1,["5cOAlUBe5TW4pKlwREhLur"]],[21,"Logo",33554432,3,[[33,-430,[5,219.6,121.2],[0,0,1]],[91,9,16,16,-431],[24,0,-432,55]],[1,-944,524,0]],[45,"Cross",33554432,6,[[[19,-433,[5,440,440]],[24,0,-434,60],-435],4,4,1],[1,-13.217999999999961,-59.91599999999994,0]],[21,"handle_2",33554432,8,[[19,-436,[5,248,120]],[24,0,-437,67]],[1,0,106.163,0]],[21,"Hand",33554432,8,[[19,-438,[5,258.4,244]],[24,0,-439,68],[35,1,-440]],[1,-245.903,448.175,0]],[14,0,{},2,[15,"8fS61IWEVIiJ6GvZ2h+jxF",-441,[16,"4aRFC6p2FNnZZg3RUWYCnV",null,[[11,"Coin",["_name"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]]],[9,["_lpos"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[1,7.168,-4.553,0]],[9,["_lrot"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[3,0,0,0,1]],[9,["_euler"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[1,0,0,0]]]],0]],[14,0,{},2,[15,"8fS61IWEVIiJ6GvZ2h+jxF",-442,[16,"42waucswVDYptCtRNRDLmt",null,[[11,"Coin-001",["_name"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]]],[9,["_lpos"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[1,11.539,-4.553,0]],[9,["_lrot"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[3,0,0,0,1]],[9,["_euler"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[1,0,0,0]],[11,33554432,["_layer"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]]]]],1]],[14,0,{},2,[15,"8fS61IWEVIiJ6GvZ2h+jxF",-443,[16,"e9Qal6r49Fo48dxiXqhOTo",null,[[11,"Coin-002",["_name"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]]],[9,["_lpos"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[1,15.298,-4.553,0]],[9,["_lrot"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[3,0,0,0,1]],[9,["_euler"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[1,0,0,0]],[11,33554432,["_layer"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]]]]],2]],[14,0,{},2,[15,"8fS61IWEVIiJ6GvZ2h+jxF",-444,[16,"98S2j3pUtJqaP7N8Z7zWqz",null,[[11,"Coin-003",["_name"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]]],[9,["_lpos"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[1,41.436,-4.553,0]],[9,["_lrot"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[3,0,0,0,1]],[9,["_euler"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[1,0,0,0]],[11,33554432,["_layer"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]]],[9,["_lpos"],[1,["e61Uy3TyZPNJ2LZmcwGPX0"]],[1,0,0,0]]]],3]],[14,0,{},2,[15,"8fS61IWEVIiJ6GvZ2h+jxF",-445,[16,"8fOZQPhFlD9ZT1H3yXvE1g",null,[[11,"Coin-004",["_name"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]]],[9,["_lpos"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[1,37.677,-4.553,0]],[9,["_lrot"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[3,0,0,0,1]],[9,["_euler"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[1,0,0,0]],[11,33554432,["_layer"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]]]]],4]],[14,0,{},2,[15,"8fS61IWEVIiJ6GvZ2h+jxF",-446,[16,"9dK5+aMKdD8rdE9uaRGpJZ",null,[[11,"Coin-005",["_name"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]]],[9,["_lpos"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[1,33.306,-4.553,0]],[9,["_lrot"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[3,0,0,0,1]],[9,["_euler"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[1,0,0,0]],[11,33554432,["_layer"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]]]]],5]],[14,0,{},2,[15,"8fS61IWEVIiJ6GvZ2h+jxF",-447,[16,"d9qR0GBz1NY7897fYpATlV",null,[[11,"Coin-006",["_name"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]]],[9,["_lpos"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[1,54.152,-4.553,0]],[9,["_lrot"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[3,0,0,0,1]],[9,["_euler"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[1,0,0,0]],[11,33554432,["_layer"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]]],[9,["_lpos"],[1,["e61Uy3TyZPNJ2LZmcwGPX0"]],[1,0,0,0]]]],6]],[14,0,{},2,[15,"8fS61IWEVIiJ6GvZ2h+jxF",-448,[16,"b2vB9UJdVPf7jJrkDA3QM+",null,[[11,"Coin-007",["_name"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]]],[9,["_lpos"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[1,57.912,-4.553,0]],[9,["_lrot"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[3,0,0,0,1]],[9,["_euler"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[1,0,0,0]],[11,33554432,["_layer"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]]],[9,["_lpos"],[1,["e61Uy3TyZPNJ2LZmcwGPX0"]],[1,0,0,0]]]],7]],[14,0,{},2,[15,"8fS61IWEVIiJ6GvZ2h+jxF",-449,[16,"4fJKjrfTFLRrv/9rArEsBN",null,[[11,"Coin-008",["_name"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]]],[9,["_lpos"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[1,80.245,-4.553,0]],[9,["_lrot"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[3,0,0,0,1]],[9,["_euler"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[1,0,0,0]],[11,33554432,["_layer"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]]],[9,["_lpos"],[1,["e61Uy3TyZPNJ2LZmcwGPX0"]],[1,0,0,0]]]],8]],[14,0,{},2,[15,"8fS61IWEVIiJ6GvZ2h+jxF",-450,[16,"efKe2rd6BFMb6vO+TEOQ19",null,[[11,"Coin-009",["_name"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]]],[9,["_lpos"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[1,76.485,-4.553,0]],[9,["_lrot"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[3,0,0,0,1]],[9,["_euler"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[1,0,0,0]],[11,33554432,["_layer"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]]],[9,["_lpos"],[1,["e61Uy3TyZPNJ2LZmcwGPX0"]],[1,0,0,0]]]],9]],[14,0,{},2,[15,"8fS61IWEVIiJ6GvZ2h+jxF",-451,[16,"b4ccK26G5BWZmR30gpahYm",null,[[11,"Coin-010",["_name"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]]],[9,["_lpos"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[1,84.43,-4.553,0]],[9,["_lrot"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[3,0,0,0,1]],[9,["_euler"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[1,0,0,0]],[11,33554432,["_layer"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]]],[9,["_lpos"],[1,["e61Uy3TyZPNJ2LZmcwGPX0"]],[1,0,0,0]]]],10]],[14,0,{},2,[15,"8fS61IWEVIiJ6GvZ2h+jxF",-452,[16,"7celBcTP9HarZ/2mI42++5",null,[[11,"Coin-011",["_name"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]]],[9,["_lpos"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[1,88.19,-4.553,0]],[9,["_lrot"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[3,0,0,0,1]],[9,["_euler"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[1,0,0,0]],[11,33554432,["_layer"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]]],[9,["_lpos"],[1,["e61Uy3TyZPNJ2LZmcwGPX0"]],[1,0,0,0]]]],11]],[14,0,{},2,[15,"8fS61IWEVIiJ6GvZ2h+jxF",-453,[16,"54YhwKwKxBAZWj7DCm5nC8",null,[[11,"Coin-012",["_name"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]]],[9,["_lpos"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[1,97.639,-4.553,0]],[9,["_lrot"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[3,0,0,0,1]],[9,["_euler"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[1,0,0,0]],[11,33554432,["_layer"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]]],[9,["_lpos"],[1,["e61Uy3TyZPNJ2LZmcwGPX0"]],[1,0,0,0]]]],12]],[14,0,{},2,[15,"8fS61IWEVIiJ6GvZ2h+jxF",-454,[16,"a8QBnMU0ZLub57Tgrlpmo9",null,[[11,"Coin-013",["_name"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]]],[9,["_lpos"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[1,93.879,-4.553,0]],[9,["_lrot"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[3,0,0,0,1]],[9,["_euler"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]],[1,0,0,0]],[11,33554432,["_layer"],[1,["8fS61IWEVIiJ6GvZ2h+jxF"]]],[9,["_lpos"],[1,["e61Uy3TyZPNJ2LZmcwGPX0"]],[1,0,0,0]]]],13]],[42,"Main Camera","c9DMICJLFO5IeO07EPon7U",7,[[115,100,14,1822425087,-455,[4,4294967295]],[117,-456,9]],[1,-24.231,13.476,36.553],[3,-0.12358335729223963,-0.16520615892941065,-0.02087039137302141,0.9782630043174003],[1,-14.4,-19.171,0]],[5,"frame_wheel.001",4,[[4,-457,[22],[2],23],[32,false,-458]],[1,0.02623516134917736,0.000027339838197804056,0.03267925605177879]],[5,"frame_wheel",4,[[4,-459,[24],[2],25],[32,false,-460]],[1,-0.02620025724172592,0.000027339838197804056,0.03267925605177879]],[5,"DBlock_Full.001",4,[[4,-461,[26],[2],27],[32,false,-462]],[1,-0.0000035106763789372053,0.000027340554879629053,0.03306695818901062]],[5,"Box",4,[[4,-463,[30],[2],31],[46,false,-464,[1,1,1,3]]],[1,-0.025562476366758347,0.000027339474399923347,0.033094488084316254]],[68,"Particle",13,[-465],[3,0.5,0.4999999999999999,0.5,0.5000000000000001],[1,90,0,90]],[43,"Front_Wheel",4,[14,15],[1,0.026302414014935493,0,0.010411705821752548]],[43,"Back_Wheel",4,[16,17],[1,-0.026302414014935493,0,0.010411705821752548]],[14,0,{},9,[15,"5cOAlUBe5TW4pKlwREhLur",-466,[113,"0eM/RkPu9Bp53H4vCR/jKQ",[[114,"Character",["_name"],81],[36,["_lpos"],81,[1,-0.033,2.544,0.678]],[36,["_lrot"],81,[3,0,0,0,1]],[36,["_euler"],81,[1,0,0,0]]]],49]],[31,"back_plane",33554432,10,[[33,-467,[5,205.71299999999997,98.95],[0,1,0.5]],[93,0,-468,[4,1090519039],56]]],[21,"coin",33554432,10,[[19,-469,[5,91,90]],[94,-470,57]],[1,-131.71900000000005,-0.7349999999999,0]],[31,"handle_1",33554432,8,[[19,-471,[5,268,395]],[24,0,-472,66]]],[64,"Ride_Master_Roadv1_v2","8a9+4fE7JLJ5h8iCMn2jg4",7,[1,-473]],[42,"Main Light","c0y6F5f+pAvI805TdmxIjx",7,[[118,7280,3.5,-474,[4,4293982975],[119]]],[1,5.937,21.27,28.225],[3,-0.22857658777488227,-0.36968329084693397,-0.8991667813481075,-0.05085378363364443],[1,-138.356,-157.244,15.097]],[5,"Background-001",12,[[27,-475,[14],15]],[1,10.24077777777778,0,0]],[5,"Background-002",12,[[27,-476,[16],17]],[1,20.40466666666667,0,0]],[5,"Background-003",12,[[27,-477,[18],19]],[1,30.62177777777778,0,0]],[111,true,80,[1,0.02491077221930027,0.02491077594459057,0.02491077594459057]],[120,105,[32],[121,[4,805306367]],[20,1],[12],[12],[20,0.15],[12],[12],[12],[12],[20,0.3],[12],[20,10],[12],[123,[37]],[124,true,0,0.0001,0.1,[20,1]],[125,true,true,[20,2.5],[20,4],[20,0.2],[12]],[126,[12],[12],[12],[20,1]],[127,[12],[12],[12]],[128,[12],[12],[12],[12]],[129,[12],[12],[12]],[130,[122,1,[131,[0,1],[[51,2,1],[51,2,1]]]],[12]],[132],[133,[20,1],[12],[37],[37],-478],[134,33,34]],[135,8,84],[69,"Camera",3,[-479],[1,0,0,1000]],[116,0,1073741824,674.9579831932773,2000,6,41943040,120,[4,4278190080]],[35,1,83],[35,1,11],[19,8,[5,265.733,388.497]],[136,true,8,[69]],[5,"Road_platform",1,[[4,-480,[70],[2],71]],[1,-0.7870872616767883,0.012902479618787766,0.07458862662315369]],[5,"Road_platform.001",1,[[4,-481,[72],[2],73]],[1,0.7924148440361023,0.012902479618787766,0.07458862662315369]],[65,"finish",112,[[4,-482,[254],[2],255]],[1,165.87115478515625,1.1004533767700195,0.16646458208560944],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,100,100,100],[1,-90.00000965934633,0,0]]],0,[0,-1,126,0,-2,127,0,-3,20,0,-4,21,0,-5,22,0,-6,23,0,-7,24,0,-8,25,0,-9,26,0,-10,27,0,-11,28,0,-12,29,0,-13,30,0,-14,31,0,-15,32,0,-16,33,0,-17,34,0,-18,35,0,-19,36,0,-20,37,0,-21,38,0,-22,39,0,-23,40,0,-24,41,0,-25,42,0,-26,43,0,-27,44,0,-28,45,0,-29,46,0,-30,47,0,-31,48,0,-32,49,0,-33,50,0,-34,51,0,-35,52,0,-36,53,0,-37,54,0,-38,55,0,-39,56,0,-40,57,0,-41,58,0,-42,59,0,-43,60,0,-44,61,0,-45,62,0,-46,63,0,-47,64,0,-48,65,0,-49,66,0,-50,67,0,-51,68,0,-52,69,0,-53,70,0,-54,71,0,-55,72,0,-56,73,0,-57,74,0,-58,75,0,-59,76,0,-60,77,0,-61,78,0,-62,79,0,0,2,0,-1,86,0,-2,87,0,-3,88,0,-4,89,0,-5,90,0,-6,91,0,-7,92,0,-8,93,0,-9,94,0,-10,95,0,-11,96,0,-12,97,0,-13,98,0,-14,99,0,0,3,0,18,121,0,0,3,0,0,3,0,-1,120,0,-2,5,0,-3,82,0,-4,10,0,-5,8,0,-6,6,0,-1,101,0,-2,102,0,-3,103,0,-4,80,0,-5,104,0,-6,13,0,-7,106,0,-8,107,0,0,5,0,0,5,0,0,5,0,13,5,0,19,5,0,0,5,0,0,5,0,0,5,0,0,6,0,0,6,0,20,123,0,21,122,0,0,6,0,-1,19,0,-2,83,0,-3,11,0,-1,86,0,-2,87,0,-3,88,0,-4,89,0,-5,90,0,-6,91,0,-7,92,0,-8,93,0,-9,94,0,-10,95,0,-11,96,0,-12,97,0,-13,98,0,-14,99,0,-15,108,0,-1,113,0,-3,12,0,-4,100,0,-5,112,0,-6,9,0,-1,124,0,0,8,0,-3,125,0,-4,119,0,-1,111,0,-2,84,0,-3,85,0,22,117,0,23,119,0,0,9,0,0,9,0,-2,108,0,0,10,0,0,10,0,-1,109,0,-2,110,0,-3,18,0,0,11,0,0,11,0,13,11,0,0,11,0,-4,123,0,0,12,0,-1,114,0,-2,115,0,-3,116,0,0,13,0,0,13,0,24,105,0,0,13,0,-1,105,0,0,14,0,0,14,0,0,14,0,0,14,0,0,15,0,0,15,0,0,15,0,0,15,0,0,16,0,0,16,0,0,16,0,0,16,0,0,17,0,0,17,0,0,17,0,0,17,0,0,18,0,0,18,0,0,18,0,0,18,0,0,19,0,0,19,0,0,19,0,0,19,0,0,20,0,0,20,0,0,20,0,0,20,0,0,21,0,0,21,0,0,21,0,0,21,0,0,22,0,0,22,0,0,22,0,0,22,0,0,23,0,0,23,0,0,23,0,0,23,0,0,24,0,0,24,0,0,24,0,0,24,0,0,25,0,0,25,0,0,25,0,0,25,0,0,26,0,0,26,0,0,26,0,0,26,0,0,27,0,0,27,0,0,27,0,0,27,0,0,28,0,0,28,0,0,28,0,0,28,0,0,29,0,0,29,0,0,29,0,0,29,0,0,30,0,0,30,0,0,30,0,0,30,0,0,31,0,0,31,0,0,31,0,0,31,0,0,32,0,0,32,0,0,32,0,0,32,0,0,33,0,0,33,0,0,33,0,0,33,0,0,34,0,0,34,0,0,34,0,0,34,0,0,35,0,0,35,0,0,35,0,0,35,0,0,36,0,0,36,0,0,36,0,0,36,0,0,37,0,0,37,0,0,37,0,0,37,0,0,38,0,0,38,0,0,38,0,0,38,0,0,39,0,0,39,0,0,39,0,0,39,0,0,40,0,0,40,0,0,40,0,0,40,0,0,41,0,0,41,0,0,41,0,0,41,0,0,42,0,0,42,0,0,42,0,0,42,0,0,43,0,0,43,0,0,43,0,0,43,0,0,44,0,0,44,0,0,44,0,0,44,0,0,45,0,0,45,0,0,45,0,0,45,0,0,46,0,0,46,0,0,46,0,0,46,0,0,47,0,0,47,0,0,47,0,0,47,0,0,48,0,0,48,0,0,48,0,0,48,0,0,49,0,0,49,0,0,49,0,0,49,0,0,50,0,0,50,0,0,50,0,0,50,0,0,51,0,0,51,0,0,51,0,0,51,0,0,52,0,0,52,0,0,52,0,0,52,0,0,53,0,0,53,0,0,53,0,0,53,0,0,54,0,0,54,0,0,54,0,0,54,0,0,55,0,0,55,0,0,55,0,0,55,0,0,56,0,0,56,0,0,56,0,0,56,0,0,57,0,0,57,0,0,57,0,0,57,0,0,58,0,0,58,0,0,58,0,0,58,0,0,59,0,0,59,0,0,59,0,0,59,0,0,60,0,0,60,0,0,60,0,0,60,0,0,61,0,0,61,0,0,61,0,0,61,0,0,62,0,0,62,0,0,62,0,0,62,0,0,63,0,0,63,0,0,63,0,0,63,0,0,64,0,0,64,0,0,64,0,0,64,0,0,65,0,0,65,0,0,65,0,0,65,0,0,66,0,0,66,0,0,66,0,0,66,0,0,67,0,0,67,0,0,67,0,0,67,0,0,68,0,0,68,0,0,68,0,0,68,0,0,69,0,0,69,0,0,69,0,0,69,0,0,70,0,0,70,0,0,70,0,0,70,0,0,71,0,0,71,0,0,71,0,0,71,0,0,72,0,0,72,0,0,72,0,0,72,0,0,73,0,0,73,0,0,73,0,0,73,0,0,74,0,0,74,0,0,74,0,0,74,0,0,75,0,0,75,0,0,75,0,0,75,0,0,76,0,0,76,0,0,76,0,0,76,0,0,77,0,0,77,0,0,77,0,0,77,0,0,78,0,0,78,0,0,78,0,0,78,0,0,79,0,0,79,0,0,79,0,0,79,0,0,80,0,0,80,0,-3,117,0,0,82,0,0,82,0,0,82,0,0,83,0,0,83,0,-3,122,0,0,84,0,0,84,0,0,85,0,0,85,0,0,85,0,4,86,0,4,87,0,4,88,0,4,89,0,4,90,0,4,91,0,4,92,0,4,93,0,4,94,0,4,95,0,4,96,0,4,97,0,4,98,0,4,99,0,0,100,0,0,100,0,0,101,0,0,101,0,0,102,0,0,102,0,0,103,0,0,103,0,0,104,0,0,104,0,-1,118,0,4,108,0,0,109,0,0,109,0,0,110,0,0,110,0,0,111,0,0,111,0,-2,128,0,0,113,0,0,114,0,0,115,0,0,116,0,25,118,0,-1,121,0,0,126,0,0,127,0,0,128,0,26,7,1,3,112,2,3,7,3,3,7,4,3,9,14,3,106,15,3,106,16,3,107,17,3,107,119,27,124,119,28,125,482],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,125],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,-1,6,-1,6,-1,6,-1,6,-1,1,-1,1,-1,1,-1,1,-1,1,-1,29,30,-1,1,-1,1,2,-1,1,2,-1,1,2,-1,1,2,5,6,10,14,15,16,6,6,6,6,10,6,6,10,14,15,16,6,6,6,-1,-1,1,-1,1,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,2,-1,1,31,32,2,12],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,7,8,7,8,7,8,7,8,5,43,6,44,5,45,5,46,5,47,11,11,12,5,48,6,49,0,6,50,0,6,51,0,6,52,0,53,13,13,14,15,16,54,9,55,9,9,56,17,17,14,15,16,57,58,59,18,1,60,1,61,1,62,0,1,63,0,1,64,0,1,65,0,1,66,0,1,67,0,1,68,0,1,69,0,1,70,0,1,71,0,1,72,0,1,73,0,1,74,0,1,75,0,1,76,0,1,77,0,1,78,0,1,79,0,1,80,0,1,81,0,1,82,0,1,83,0,1,84,0,1,85,0,1,86,0,1,87,0,1,88,0,1,89,0,1,90,0,1,91,0,1,92,0,1,93,0,1,94,0,1,95,0,1,96,0,1,97,0,1,98,0,1,99,0,1,100,0,1,101,0,1,102,0,1,103,0,1,104,0,1,105,0,1,106,0,1,107,0,1,108,0,1,109,0,1,110,0,1,111,0,1,112,0,1,113,0,1,114,0,1,115,0,1,116,0,1,117,0,1,118,0,1,119,0,1,120,0,1,121,0,1,122,123,124,0,18]],[[[75,"default-sprite-renderer-material",[{}],[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}]]],0,0,[0],[8],[125]],[[{"base":"2,2,0,0,2,0","rgbe":true,"mipmaps":[{"front":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@e9a6d","back":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@40c10","left":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@8fd34","right":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@74afd","top":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@bb97f","bottom":"d032ac98-05e1-4090-88bb-eb640dcb5fc1@b47c0@7d38f"}]}],[9],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[[74,"particle-add",[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[9,8],[12,126]],[[[47,"dcc/imported-specular-glossiness",[{"hash":2838361292,"name":"dcc/imported-specular-glossiness|standard-vs|standard-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"diffuseColor","type":16,"count":1},{"name":"specularColor","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScale","type":13,"count":1},{"name":"alphaThreshold","type":13,"count":1},{"name":"shininessExponent","type":13,"count":1},{"name":"glossiness","type":13,"count":1},{"name":"metallic","type":13,"count":1},{"name":"normalScale","type":13,"count":1},{"name":"transparencyFactor","type":13,"count":1},{"name":"diffuseFactor","type":13,"count":1},{"name":"specularFactor","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"shininessExponentMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_SHININESS_MAP"]},{"name":"specularGlossinessMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_SPECULAR_GLOSSINESS_MAP"]},{"name":"specularMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_SPECULAR_MAP"]},{"name":"metallicMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_MAP"]},{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_ALBEDO_MAP"]},{"name":"transparencyMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_TRANSPARENCY_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":7,"defines":["USE_NORMAL_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":8,"defines":["USE_EMISSIVE_MAP"]},{"name":"emissiveScaleMap","type":28,"count":1,"stageFlags":16,"binding":9,"defines":["USE_EMISSIVESCALE_MAP"]}],"samplers":[],"textures":[],"buffers":[{"name":"b_ccLightsBuffer","memoryAccess":1,"stageFlags":16,"binding":10,"defines":["CC_FORWARD_ADD"]},{"name":"b_clusterLightIndicesBuffer","memoryAccess":1,"stageFlags":16,"binding":11,"defines":["CC_FORWARD_ADD"]},{"name":"b_clusterLightGridBuffer","memoryAccess":1,"stageFlags":16,"binding":12,"defines":["CC_FORWARD_ADD"]}],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_vertexId","format":11,"location":12,"defines":["CC_USE_MORPH"]},{"name":"a_color","format":44,"location":13,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":14,"defines":[]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":["CC_FORWARD_ADD"]},{"name":"fragColor0","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":1,"defines":["CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor1","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":2,"defines":["CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor2","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":3,"defines":["CC_FORWARD_ADD","CC_PIPELINE_TYPE"]}],"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_debug_view_mode;\n  mediump vec4 cc_debug_view_composite_pack_1;\n  mediump vec4 cc_debug_view_composite_pack_2;\n  mediump vec4 cc_debug_view_composite_pack_3;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n  };\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4  tilingOffset;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float emissiveScale;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nout mediump float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out vec4 v_color;\n#endif\nout vec3 v_position;\nout vec3 v_normal;\nout vec2 v_uv;\nout vec2 v_uv1;\n#if USE_NORMAL_MAP\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\n#if CC_RECEIVE_SHADOW\n  out mediump vec2 v_shadowBias;\n#endif\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * (In.tangent.w > 0.0 ? 1.0 : -1.0);\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_debug_view_mode;\n  mediump vec4 cc_debug_view_composite_pack_1;\n  mediump vec4 cc_debug_view_composite_pack_2;\n  mediump vec4 cc_debug_view_composite_pack_3;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform Constants {\n  vec4  tilingOffset;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float emissiveScale;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin mediump float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (cc_debug_view_mode.y > 0.0)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (cc_debug_view_mode.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (cc_debug_view_composite_pack_1.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (cc_debug_view_composite_pack_1.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (cc_debug_view_composite_pack_1.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (cc_debug_view_composite_pack_1.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (cc_debug_view_composite_pack_2.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (cc_debug_view_composite_pack_2.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (cc_debug_view_composite_pack_2.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (cc_debug_view_composite_pack_2.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (cc_debug_view_composite_pack_3.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (cc_debug_view_composite_pack_3.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (cc_debug_view_composite_pack_3.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (cc_debug_view_composite_pack_3.w > 0.0)\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nvec3 RotationVecFromAxisY(vec3 v, float cosTheta, float sinTheta)\n{\n    vec3 result;\n    result.x = dot(v, vec3(cosTheta, 0.0, -sinTheta));\n    result.y = v.y;\n    result.z = dot(v, vec3(sinTheta, 0.0,  cosTheta));\n    return result;\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n    highp float unpackHighpData (float mainPart, float modPart) {\n      highp float data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n      highp float data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n      highp float divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n      highp vec2 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n      highp vec2 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n      highp vec2 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n      highp vec3 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n      highp vec3 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n      highp vec3 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n      highp vec4 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n      highp vec4 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n      highp vec4 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n  float NativePCFShadowFactorHard (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    #if CC_SHADOWMAP_FORMAT == 1\n      return step(shadowNDCPos.z, dot(texture(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      return step(shadowNDCPos.z, texture(shadowMap, shadowNDCPos.xy).x);\n    #endif\n  }\n  float NativePCFShadowFactorSoft (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 shadowNDCPos_offset = shadowNDCPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block1 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)).x);\n    #endif\n    float coefX   = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float NativePCFShadowFactorSoft3X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    float shadowNDCPos_offset_L = shadowNDCPos.x - oneTap.x;\n    float shadowNDCPos_offset_R = shadowNDCPos.x + oneTap.x;\n    float shadowNDCPos_offset_U = shadowNDCPos.y - oneTap.y;\n    float shadowNDCPos_offset_D = shadowNDCPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)).x);\n      block1 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)).x);\n      block4 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block5 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)).x);\n      block6 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)).x);\n      block7 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)).x);\n      block8 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)).x);\n    #endif\n    float coefX = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float coefY = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float NativePCFShadowFactorSoft5X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 twoTap = oneTap * 2.0;\n    vec2 offset1 = shadowNDCPos.xy + vec2(-twoTap.x, -twoTap.y);\n    vec2 offset2 = shadowNDCPos.xy + vec2(-oneTap.x, -twoTap.y);\n    vec2 offset3 = shadowNDCPos.xy + vec2(0.0, -twoTap.y);\n    vec2 offset4 = shadowNDCPos.xy + vec2(oneTap.x, -twoTap.y);\n    vec2 offset5 = shadowNDCPos.xy + vec2(twoTap.x, -twoTap.y);\n    vec2 offset6 = shadowNDCPos.xy + vec2(-twoTap.x, -oneTap.y);\n    vec2 offset7 = shadowNDCPos.xy + vec2(-oneTap.x, -oneTap.y);\n    vec2 offset8 = shadowNDCPos.xy + vec2(0.0, -oneTap.y);\n    vec2 offset9 = shadowNDCPos.xy + vec2(oneTap.x, -oneTap.y);\n    vec2 offset10 = shadowNDCPos.xy + vec2(twoTap.x, -oneTap.y);\n    vec2 offset11 = shadowNDCPos.xy + vec2(-twoTap.x, 0.0);\n    vec2 offset12 = shadowNDCPos.xy + vec2(-oneTap.x, 0.0);\n    vec2 offset13 = shadowNDCPos.xy + vec2(0.0, 0.0);\n    vec2 offset14 = shadowNDCPos.xy + vec2(oneTap.x, 0.0);\n    vec2 offset15 = shadowNDCPos.xy + vec2(twoTap.x, 0.0);\n    vec2 offset16 = shadowNDCPos.xy + vec2(-twoTap.x, oneTap.y);\n    vec2 offset17 = shadowNDCPos.xy + vec2(-oneTap.x, oneTap.y);\n    vec2 offset18 = shadowNDCPos.xy + vec2(0.0, oneTap.y);\n    vec2 offset19 = shadowNDCPos.xy + vec2(oneTap.x, oneTap.y);\n    vec2 offset20 = shadowNDCPos.xy + vec2(twoTap.x, oneTap.y);\n    vec2 offset21 = shadowNDCPos.xy + vec2(-twoTap.x, twoTap.y);\n    vec2 offset22 = shadowNDCPos.xy + vec2(-oneTap.x, twoTap.y);\n    vec2 offset23 = shadowNDCPos.xy + vec2(0.0, twoTap.y);\n    vec2 offset24 = shadowNDCPos.xy + vec2(oneTap.x, twoTap.y);\n    vec2 offset25 = shadowNDCPos.xy + vec2(twoTap.x, twoTap.y);\n    float block1, block2, block3, block4, block5, block6, block7, block8, block9, block10, block11, block12, block13, block14, block15, block16, block17, block18, block19, block20, block21, block22, block23, block24, block25;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, offset1), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, offset2), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, offset3), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture(shadowMap, offset4), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture(shadowMap, offset5), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture(shadowMap, offset6), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture(shadowMap, offset7), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture(shadowMap, offset8), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block9 = step(shadowNDCPos.z, dot(texture(shadowMap, offset9), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block10 = step(shadowNDCPos.z, dot(texture(shadowMap, offset10), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block11 = step(shadowNDCPos.z, dot(texture(shadowMap, offset11), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block12 = step(shadowNDCPos.z, dot(texture(shadowMap, offset12), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block13 = step(shadowNDCPos.z, dot(texture(shadowMap, offset13), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block14 = step(shadowNDCPos.z, dot(texture(shadowMap, offset14), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block15 = step(shadowNDCPos.z, dot(texture(shadowMap, offset15), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block16 = step(shadowNDCPos.z, dot(texture(shadowMap, offset16), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block17 = step(shadowNDCPos.z, dot(texture(shadowMap, offset17), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block18 = step(shadowNDCPos.z, dot(texture(shadowMap, offset18), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block19 = step(shadowNDCPos.z, dot(texture(shadowMap, offset19), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block20 = step(shadowNDCPos.z, dot(texture(shadowMap, offset20), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block21 = step(shadowNDCPos.z, dot(texture(shadowMap, offset21), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block22 = step(shadowNDCPos.z, dot(texture(shadowMap, offset22), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block23 = step(shadowNDCPos.z, dot(texture(shadowMap, offset23), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block24 = step(shadowNDCPos.z, dot(texture(shadowMap, offset24), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block25 = step(shadowNDCPos.z, dot(texture(shadowMap, offset25), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block1 = step(shadowNDCPos.z, texture(shadowMap, offset1).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, offset2).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, offset3).x);\n      block4 = step(shadowNDCPos.z, texture(shadowMap, offset4).x);\n      block5 = step(shadowNDCPos.z, texture(shadowMap, offset5).x);\n      block6 = step(shadowNDCPos.z, texture(shadowMap, offset6).x);\n      block7 = step(shadowNDCPos.z, texture(shadowMap, offset7).x);\n      block8 = step(shadowNDCPos.z, texture(shadowMap, offset8).x);\n      block9 = step(shadowNDCPos.z, texture(shadowMap, offset9).x);\n      block10 = step(shadowNDCPos.z, texture(shadowMap, offset10).x);\n      block11 = step(shadowNDCPos.z, texture(shadowMap, offset11).x);\n      block12 = step(shadowNDCPos.z, texture(shadowMap, offset12).x);\n      block13 = step(shadowNDCPos.z, texture(shadowMap, offset13).x);\n      block14 = step(shadowNDCPos.z, texture(shadowMap, offset14).x);\n      block15 = step(shadowNDCPos.z, texture(shadowMap, offset15).x);\n      block16 = step(shadowNDCPos.z, texture(shadowMap, offset16).x);\n      block17 = step(shadowNDCPos.z, texture(shadowMap, offset17).x);\n      block18 = step(shadowNDCPos.z, texture(shadowMap, offset18).x);\n      block19 = step(shadowNDCPos.z, texture(shadowMap, offset19).x);\n      block20 = step(shadowNDCPos.z, texture(shadowMap, offset20).x);\n      block21 = step(shadowNDCPos.z, texture(shadowMap, offset21).x);\n      block22 = step(shadowNDCPos.z, texture(shadowMap, offset22).x);\n      block23 = step(shadowNDCPos.z, texture(shadowMap, offset23).x);\n      block24 = step(shadowNDCPos.z, texture(shadowMap, offset24).x);\n      block25 = step(shadowNDCPos.z, texture(shadowMap, offset25).x);\n    #endif\n    vec2 coef = fract(shadowNDCPos.xy * shadowMapResolution);\n    vec2 v1X1 = mix(vec2(block1, block6), vec2(block2, block7), coef.xx);\n    vec2 v1X2 = mix(vec2(block2, block7), vec2(block3, block8), coef.xx);\n    vec2 v1X3 = mix(vec2(block3, block8), vec2(block4, block9), coef.xx);\n    vec2 v1X4 = mix(vec2(block4, block9), vec2(block5, block10), coef.xx);\n    float v1 = mix(v1X1.x, v1X1.y, coef.y) + mix(v1X2.x, v1X2.y, coef.y) + mix(v1X3.x, v1X3.y, coef.y) + mix(v1X4.x, v1X4.y, coef.y);\n    vec2 v2X1 = mix(vec2(block6, block11), vec2(block7, block12), coef.xx);\n    vec2 v2X2 = mix(vec2(block7, block12), vec2(block8, block13), coef.xx);\n    vec2 v2X3 = mix(vec2(block8, block13), vec2(block9, block14), coef.xx);\n    vec2 v2X4 = mix(vec2(block9, block14), vec2(block10, block15), coef.xx);\n    float v2 = mix(v2X1.x, v2X1.y, coef.y) + mix(v2X2.x, v2X2.y, coef.y) + mix(v2X3.x, v2X3.y, coef.y) + mix(v2X4.x, v2X4.y, coef.y);\n    vec2 v3X1 = mix(vec2(block11, block16), vec2(block12, block17), coef.xx);\n    vec2 v3X2 = mix(vec2(block12, block17), vec2(block13, block18), coef.xx);\n    vec2 v3X3 = mix(vec2(block13, block18), vec2(block14, block19), coef.xx);\n    vec2 v3X4 = mix(vec2(block14, block19), vec2(block15, block20), coef.xx);\n    float v3 = mix(v3X1.x, v3X1.y, coef.y) + mix(v3X2.x, v3X2.y, coef.y) + mix(v3X3.x, v3X3.y, coef.y) + mix(v3X4.x, v3X4.y, coef.y);\n    vec2 v4X1 = mix(vec2(block16, block21), vec2(block17, block22), coef.xx);\n    vec2 v4X2 = mix(vec2(block17, block22), vec2(block18, block23), coef.xx);\n    vec2 v4X3 = mix(vec2(block18, block23), vec2(block19, block24), coef.xx);\n    vec2 v4X4 = mix(vec2(block19, block24), vec2(block20, block25), coef.xx);\n    float v4 = mix(v4X1.x, v4X1.y, coef.y) + mix(v4X2.x, v4X2.y, coef.y) + mix(v4X3.x, v4X3.y, coef.y) + mix(v4X4.x, v4X4.y, coef.y);\n    float fAvg = (v1 + v2 + v3 + v4) * 0.0625;\n    return fAvg;\n  }\n  bool GetShadowNDCPos(out vec3 shadowNDCPos, vec4 shadowPosWithDepthBias)\n  {\n  \tshadowNDCPos = shadowPosWithDepthBias.xyz / shadowPosWithDepthBias.w * 0.5 + 0.5;\n  \tif (shadowNDCPos.x < 0.0 || shadowNDCPos.x > 1.0 ||\n  \t\tshadowNDCPos.y < 0.0 || shadowNDCPos.y > 1.0 ||\n  \t\tshadowNDCPos.z < 0.0 || shadowNDCPos.z > 1.0) {\n  \t\treturn false;\n  \t}\n  \tshadowNDCPos.xy = cc_cameraPos.w == 1.0 ? vec2(shadowNDCPos.xy.x, 1.0 - shadowNDCPos.xy.y) : shadowNDCPos.xy;\n  \treturn true;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, vec3 matViewDir0, vec3 matViewDir1, vec3 matViewDir2, vec2 projScaleXY)\n  {\n    vec4 newShadowPos = shadowPos;\n    if (normalBias > EPSILON_LOWP)\n    {\n      vec3 viewNormal = vec3(dot(matViewDir0, worldNormal), dot(matViewDir1, worldNormal), dot(matViewDir2, worldNormal));\n      if (viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, mat4 matLightView, vec2 projScaleXY)\n  {\n  \tvec4 newShadowPos = shadowPos;\n  \tif (normalBias > EPSILON_LOWP)\n  \t{\n  \t\tvec4 viewNormal = matLightView * vec4(worldNormal, 0.0);\n  \t\tif (viewNormal.z < 0.1)\n  \t\t\tnewShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n  \t}\n  \treturn newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n  \tvec3 viewSpacePos;\n  \tviewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n  \tviewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n  \tviewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n  \tvec4 clipSpacePos;\n  \tclipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n  \tclipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n  \t#if CC_SHADOWMAP_USE_LINEAR_DEPTH\n  \t\tclipSpacePos.z = GetLinearDepthFromViewSpace(viewSpacePos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n  \t\tclipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n  \t#endif\n  \treturn clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias, float projScaleZ, float projBiasZ)\n  {\n  \tfloat coeffA = projScaleZ;\n  \tfloat coeffB = projBiasZ;\n  \tfloat viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n  \tviewSpacePos_z += viewspaceDepthBias;\n  \tvec4 result = shadowPos;\n  \tresult.z = viewSpacePos_z * coeffA + coeffB;\n  \treturn result;\n  }\n  vec4 ApplyShadowDepthBias_PerspectiveLinearDepth(vec4 shadowPos, float viewspaceDepthBias, vec3 worldPos)\n  {\n    shadowPos.z = CCGetLinearDepth(worldPos, viewspaceDepthBias) * 2.0 - 1.0;\n    shadowPos.z *= shadowPos.w;\n    return shadowPos;\n  }\n  float CCGetDirLightShadowFactorHard (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    float pcf = cc_shadowWHPBInfo.z;\n    vec4 pos = vec4(1.0);\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      pos = ApplyShadowDepthBias_PerspectiveLinearDepth(shadowPos, shadowBias.x, worldPos);\n    #else\n      pos = ApplyShadowDepthBias_Perspective(shadowPos, shadowBias.x);\n    #endif\n    if (pcf > 2.9) {\n      return CCGetSpotLightShadowFactorSoft5X(pos, worldPos);\n    }else if (pcf > 1.9) {\n      return CCGetSpotLightShadowFactorSoft3X(pos, worldPos);\n    }else if (pcf > 0.9) {\n      return CCGetSpotLightShadowFactorSoft(pos, worldPos);\n    }else {\n      return CCGetSpotLightShadowFactorHard(pos, worldPos);\n    }\n  }\n  float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n  {\n    vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y, cc_matLightView, cc_shadowProjInfo.xy);\n    pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n    float realtimeShadow = 1.0;\n    #if CC_DIR_SHADOW_PCF_TYPE == 3\n      realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 2\n      realtimeShadow =  CCGetDirLightShadowFactorSoft3X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 1\n      realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 0\n      realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n    #endif\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      int layer = -1;\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      for (int i = 0; i < 4; i++) {\n        vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n        vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n        if (clipPos.x >= (0.0 + layerThreshold) && clipPos.x <= (1.0 - layerThreshold) &&\n            clipPos.y >= (0.0 + layerThreshold) && clipPos.y <= (1.0 - layerThreshold) &&\n            clipPos.z >= 0.0 && clipPos.z <= 1.0 && layer < 0) {\n          csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n          shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n          shadowProjInfo = cc_csmProjInfo[i];\n          shadowViewDir0 = cc_csmViewDir0[i].xyz;\n          shadowViewDir1 = cc_csmViewDir1[i].xyz;\n          shadowViewDir2 = cc_csmViewDir2[i].xyz;\n          layer = i;\n        }\n      }\n      return layer;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias)\n    {\n      vec4 csmPos = vec4(1.0);\n      vec4 shadowProjDepthInfo, shadowProjInfo;\n      vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n      int level = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n      if (level < 0) { return 1.0; }\n      vec4 pos = ApplyShadowDepthBias_FaceNormal(csmPos, N, shadowBias.y, shadowViewDir0, shadowViewDir1, shadowViewDir2, shadowProjInfo.xy);\n      pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, shadowProjDepthInfo.x, shadowProjDepthInfo.y);\n      float realtimeShadow = 1.0;\n      #if CC_DIR_SHADOW_PCF_TYPE == 3\n        realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 2\n        realtimeShadow = CCGetDirLightShadowFactorSoft3X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 1\n        realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 0\n        realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n      #endif\n      return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n    }\n  #else\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      return -1;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias) {\n      vec4 shadowPos = cc_matLightViewProj * vec4(worldPos, 1.0);\n      return CCShadowFactorBase(shadowPos, N, shadowBias);\n    }\n  #endif\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * (mipCount - 1.0);\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    vec3 position, position_fract_part;\n    #else\n    vec3 position;\n    #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  float NL = max(dot(N, L), 0.0);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      if (cc_shadowLPNNInfo.w > 0.0) {\n        #if CC_DIR_LIGHT_SHADOW_TYPE == 2\n          shadow = CCCSMFactorBase(position, N, s.shadowBias);\n        #endif\n      } else {\n        #if CC_DIR_LIGHT_SHADOW_TYPE == 1\n          shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n        #endif\n      }\n    }\n  #endif\n  #if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n    vec3 lightmap = s.lightmap.rgb;\n    #if CC_USE_HDR\n        lightmap.rgb *= cc_exposure.w * cc_exposure.x;\n    #endif\n    vec3 finalColor = diffuse * lightmap.rgb * shadow;\n  #else\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 H = normalize(L + V);\n    float NH = max(dot(N, H), 0.0);\n    vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n    vec3 dirlightContrib = (diffuseContrib + specularContrib);\n    dirlightContrib *= shadow;\n    finalColor *= dirlightContrib;\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    vec3 rotationDir = RotationVecFromAxisY(R.xyz, cc_surfaceTransform.z, cc_surfaceTransform.w);\n    #if USE_REFLECTION_DENOISE && !CC_IBL_CONVOLUTED\n      vec3 env = GetEnvReflectionWithMipFiltering(rotationDir, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, rotationDir, s.roughness * (cc_ambientGround.w - 1.0));\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = LinearToSRGB(color.rgb);\n  return color;\n}\nin highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n#endif\nbool GetMetallicAlbedoFromDiffuseSpecularWithoutColor(out float metallic, out vec3 albedo, vec3 diffuse, vec3 specular, float f0 )\n{\n\tfloat d = max(max(diffuse.x, diffuse.y), diffuse.z);\n\tvec3 normalizedColor = diffuse / (d + (d < EPSILON_LOWP ? EPSILON_LOWP : 0.0));\n\tnormalizedColor = d < EPSILON_LOWP ? specular : normalizedColor;\n\tfloat s = max(max(specular.x, specular.y), specular.z);\n\tfloat delta = (d + s) * (d + s)  - 4.0 * f0 * d;\n\tfloat deltaSqrt = sqrt(max(0.0, delta));\n\tfloat solverMetallic = (-d - s + 2.0 * f0 + deltaSqrt) / (2.0 * f0);\n\tvec3 solverAlbedo = (d + s) * normalizedColor - vec3(f0 * (1.0 - solverMetallic));\n\tbool isValidSolver = delta >= 0.0;\n\tmetallic = isValidSolver ? clamp(solverMetallic, 0.0, 1.0) : 0.0;\n\talbedo = isValidSolver ? vec3(max(0.0, solverAlbedo.x), max(0.0, solverAlbedo.y), max(0.0, solverAlbedo.z)) : diffuse;\n\treturn isValidSolver;\n}\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  in vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\nin vec3 v_position;\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  in mediump vec2 v_shadowBias;\n#endif\n#define DCC_APP_OTHERS 0\n#define DCC_APP_MAX 1\n#define DCC_APP_BLENDER 2\n#define DCC_APP_CINEMA4D 3\n#define DCC_APP_GLTF 4\n#define DCC_APP_MAYA 5\n#if USE_SHININESS_MAP\n  uniform sampler2D shininessExponentMap;\n#endif\n#if USE_SPECULAR_GLOSSINESS_MAP\n  uniform sampler2D specularGlossinessMap;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n #if USE_METALLIC_MAP\n  uniform sampler2D metallicMap;\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\n#if USE_NORMAL_MAP\n  in vec3 v_tangent;\n  in vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_EMISSIVESCALE_MAP\n  uniform sampler2D emissiveScaleMap;\n#endif\nfloat discolor(vec3 srcColor) {\n  return dot(GRAY_VECTOR, srcColor);\n}\nfloat convertShininessExponent(float shininessExp)\n{\n  #if DCC_APP_NAME == DCC_APP_BLENDER\n    float glossiness = clamp(sqrt(shininessExp) * 0.1, 0.0, 0.95);\n  #elif DCC_APP_NAME == DCC_APP_MAX || DCC_APP_NAME == DCC_APP_MAYA\n    float l2 = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n    float glossiness = pow(l2, 0.5);\n  #else\n    float glossiness = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n  #endif\n    return glossiness;\n}\nfloat getSpecularIntensityFromRoughness(float roughness)\n{\n  #if DCC_APP_NAME == DCC_APP_BLENDER\n    float specularIntensityMultiplier = mix(1.0, 5.0, roughness);\n  #elif DCC_APP_NAME == DCC_APP_CINEMA4D\n    float specularIntensityMultiplier = mix(1.0, 50.0, roughness);\n  #elif DCC_APP_NAME == DCC_APP_MAX || DCC_APP_NAME == DCC_APP_MAYA\n    float specularIntensityMultiplier = mix(1.0, 20.0, roughness);\n  #else\n    float specularIntensityMultiplier = 1.0;\n  #endif\n    return specularIntensityMultiplier;\n}\nvec4 getSpecularColorAndFactor()\n{\n  vec3 inSpecular = specularColor.rgb * specularFactor;\n  float inFactor = 1.0;\n  #if USE_SPECULAR_GLOSSINESS_MAP\n    inSpecular = SRGBToLinear(texture(specularGlossinessMap, TEXTURE_UV).rgb);\n  #endif\n  #if USE_SPECULAR_MAP\n      vec4 specularTex = texture(specularMap, TEXTURE_UV);\n      specularTex.rgb = SRGBToLinear(specularTex.rgb);\n      inSpecular = specularTex.rgb;\n  #endif\n  return vec4(inSpecular, inFactor);\n}\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = vec4(1.0);\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, TEXTURE_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    texColor.a *= transparencyFactor;\n    baseColor *= texColor;\n  #else\n    baseColor *= diffuseColor;\n  #endif\n  baseColor.rgb *= diffuseFactor;\n  #if USE_TRANSPARENCY_MAP\n    baseColor.a = texture(transparencyMap, TEXTURE_UV).TRANSPARENCY_MAP_CHANNEL;\n    #if DCC_APP_NAME == DCC_APP_MAYA\n      baseColor.a = 1.0 - baseColor.a;\n    #endif\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.a < alphaThreshold) discard;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  vec4 specularColorAndFactor = getSpecularColorAndFactor();\n  float inGlossiness = 0.0, inSpecularIntensity = 1.0;\n  #if HAS_EXPORTED_GLOSSINESS\n    #if USE_SPECULAR_GLOSSINESS_MAP\n      inGlossiness = 1.0 - texture(specularGlossinessMap, TEXTURE_UV).a;\n    #else\n      inGlossiness = glossiness;\n    #endif\n  #else\n    #if USE_SHININESS_MAP\n      #if USE_SHININESS_MAP_CHANNEL\n        inGlossiness = 1.0 - texture(shininessExponentMap, TEXTURE_UV).SHININESS_MAP_CHANNEL;\n      #else\n        inGlossiness = 1.0 - discolor(texture(shininessExponentMap, TEXTURE_UV).rgb);\n      #endif\n    #else\n      inGlossiness = convertShininessExponent(shininessExponent);\n    #endif\n    inSpecularIntensity *= getSpecularIntensityFromRoughness(1.0 - inGlossiness);\n  #endif\n  float inMetallic = 0.0;\n  vec4 albedo = baseColor;\n  #if HAS_EXPORTED_METALLIC\n    inMetallic = metallic;\n    float spec = specularFactor;\n    #if USE_SPECULAR_MAP\n      spec = dot(GRAY_VECTOR, texture(specularMap, TEXTURE_UV).rgb);\n    #endif\n    inSpecularIntensity *= spec * 0.5;\n  #else\n    GetMetallicAlbedoFromDiffuseSpecularWithoutColor(inMetallic, albedo.rgb, baseColor.rgb, specularColorAndFactor.rgb, 0.04);\n    inSpecularIntensity *= inMetallic;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, TEXTURE_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * normalScale) * normalize(v_tangent) +\n      (nmmp.y * normalScale) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    packHighpData(s.position, s.position_fract_part, v_position);\n    #else\n    s.position = v_position;\n    #endif\n  s.albedo = albedo;\n  s.occlusion = 1.0;\n  s.roughness = 1.0 - inGlossiness;\n  s.metallic = inMetallic;\n  s.specularIntensity = inSpecularIntensity * 0.5;\n  vec3 emissiveColor = emissive.rgb;\n  #if USE_EMISSIVE_MAP\n      emissiveColor.rgb = SRGBToLinear(texture(emissiveMap, TEXTURE_UV).rgb);\n  #endif\n  #if USE_EMISSIVESCALE_MAP\n      vec4 emissiveScaleColor = texture(emissiveScaleMap, TEXTURE_UV);\n      emissiveScaleColor.rgb = SRGBToLinear(emissiveScaleColor.rgb);\n      emissiveColor.rgb *= emissiveScaleColor.rgb;\n  #else\n      emissiveColor.rgb *= emissiveScale;\n  #endif\n  s.emissive = emissiveColor.rgb;\n  #if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.xyz * v_luv.z;\n    s.lightmap_test = v_luv.z;\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(std140) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW  && CC_SHADOW_TYPE == 2\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(std430, binding = 4) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(std430, binding = 5) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(std430, binding = 6) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCFragOutput(CCStandardShadingBase(s, v_shadowPos));\n    #if CC_USE_FOG != 4\n      CC_APPLY_FOG(color, s.position.xyz);\n    #endif\n    fragColorX = color;\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_lightingMapUVParam;\n  uniform highp vec4 cc_localShadowBias;\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying mediump float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying vec4 v_color;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * (In.tangent.w > 0.0 ? 1.0 : -1.0);\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\nuniform mediump vec4 cc_debug_view_mode;\n  uniform mediump vec4 cc_debug_view_composite_pack_1;\n  uniform mediump vec4 cc_debug_view_composite_pack_2;\n  uniform mediump vec4 cc_debug_view_composite_pack_3;\nuniform highp mat4 cc_matView;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_surfaceTransform;\n  uniform mediump vec4 cc_exposure;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n  uniform mediump vec4 cc_ambientSky;\n  uniform mediump vec4 cc_ambientGround;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n  uniform mediump vec4 cc_nearFar;\n  uniform mediump vec4 cc_viewPort;\n     uniform vec4 diffuseColor;\n     uniform vec4 specularColor;\n     uniform vec4 emissive;\n     uniform float emissiveScale;\n     uniform float alphaThreshold;\n     uniform float shininessExponent;\n     uniform float glossiness;\n     uniform float metallic;\n     uniform float normalScale;\n     uniform float transparencyFactor;\n     uniform float diffuseFactor;\n     uniform float specularFactor;\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying mediump float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (cc_debug_view_mode.y > 0.0)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (cc_debug_view_mode.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (cc_debug_view_composite_pack_1.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (cc_debug_view_composite_pack_1.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (cc_debug_view_composite_pack_1.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (cc_debug_view_composite_pack_1.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (cc_debug_view_composite_pack_2.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (cc_debug_view_composite_pack_2.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (cc_debug_view_composite_pack_2.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (cc_debug_view_composite_pack_2.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (cc_debug_view_composite_pack_3.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (cc_debug_view_composite_pack_3.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (cc_debug_view_composite_pack_3.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (cc_debug_view_composite_pack_3.w > 0.0)\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nuniform highp mat4 cc_matLightView;\n  uniform highp mat4 cc_matLightViewProj;\n  uniform highp vec4 cc_shadowInvProjDepthInfo;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  uniform highp vec4 cc_csmViewDir0[4];\n  uniform highp vec4 cc_csmViewDir1[4];\n  uniform highp vec4 cc_csmViewDir2[4];\n  uniform highp vec4 cc_csmAtlas[4];\n  uniform highp mat4 cc_matCSMViewProj[4];\n  uniform highp vec4 cc_csmProjDepthInfo[4];\n  uniform highp vec4 cc_csmProjInfo[4];\n#endif\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nvec3 RotationVecFromAxisY(vec3 v, float cosTheta, float sinTheta)\n{\n    vec3 result;\n    result.x = dot(v, vec3(cosTheta, 0.0, -sinTheta));\n    result.y = v.y;\n    result.z = dot(v, vec3(sinTheta, 0.0,  cosTheta));\n    return result;\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n    highp float unpackHighpData (float mainPart, float modPart) {\n      highp float data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n      highp float data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n      highp float divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n      highp vec2 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n      highp vec2 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n      highp vec2 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n      highp vec3 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n      highp vec3 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n      highp vec3 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n      highp vec4 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n      highp vec4 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n      highp vec4 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n  float NativePCFShadowFactorHard (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    #if CC_SHADOWMAP_FORMAT == 1\n      return step(shadowNDCPos.z, dot(texture2D(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      return step(shadowNDCPos.z, texture2D(shadowMap, shadowNDCPos.xy).x);\n    #endif\n  }\n  float NativePCFShadowFactorSoft (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 shadowNDCPos_offset = shadowNDCPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)).x);\n    #endif\n    float coefX   = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float NativePCFShadowFactorSoft3X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    float shadowNDCPos_offset_L = shadowNDCPos.x - oneTap.x;\n    float shadowNDCPos_offset_R = shadowNDCPos.x + oneTap.x;\n    float shadowNDCPos_offset_U = shadowNDCPos.y - oneTap.y;\n    float shadowNDCPos_offset_D = shadowNDCPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)).x);\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)).x);\n      block4 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block5 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)).x);\n      block6 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)).x);\n      block7 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)).x);\n      block8 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)).x);\n    #endif\n    float coefX = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float coefY = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float NativePCFShadowFactorSoft5X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 twoTap = oneTap * 2.0;\n    vec2 offset1 = shadowNDCPos.xy + vec2(-twoTap.x, -twoTap.y);\n    vec2 offset2 = shadowNDCPos.xy + vec2(-oneTap.x, -twoTap.y);\n    vec2 offset3 = shadowNDCPos.xy + vec2(0.0, -twoTap.y);\n    vec2 offset4 = shadowNDCPos.xy + vec2(oneTap.x, -twoTap.y);\n    vec2 offset5 = shadowNDCPos.xy + vec2(twoTap.x, -twoTap.y);\n    vec2 offset6 = shadowNDCPos.xy + vec2(-twoTap.x, -oneTap.y);\n    vec2 offset7 = shadowNDCPos.xy + vec2(-oneTap.x, -oneTap.y);\n    vec2 offset8 = shadowNDCPos.xy + vec2(0.0, -oneTap.y);\n    vec2 offset9 = shadowNDCPos.xy + vec2(oneTap.x, -oneTap.y);\n    vec2 offset10 = shadowNDCPos.xy + vec2(twoTap.x, -oneTap.y);\n    vec2 offset11 = shadowNDCPos.xy + vec2(-twoTap.x, 0.0);\n    vec2 offset12 = shadowNDCPos.xy + vec2(-oneTap.x, 0.0);\n    vec2 offset13 = shadowNDCPos.xy + vec2(0.0, 0.0);\n    vec2 offset14 = shadowNDCPos.xy + vec2(oneTap.x, 0.0);\n    vec2 offset15 = shadowNDCPos.xy + vec2(twoTap.x, 0.0);\n    vec2 offset16 = shadowNDCPos.xy + vec2(-twoTap.x, oneTap.y);\n    vec2 offset17 = shadowNDCPos.xy + vec2(-oneTap.x, oneTap.y);\n    vec2 offset18 = shadowNDCPos.xy + vec2(0.0, oneTap.y);\n    vec2 offset19 = shadowNDCPos.xy + vec2(oneTap.x, oneTap.y);\n    vec2 offset20 = shadowNDCPos.xy + vec2(twoTap.x, oneTap.y);\n    vec2 offset21 = shadowNDCPos.xy + vec2(-twoTap.x, twoTap.y);\n    vec2 offset22 = shadowNDCPos.xy + vec2(-oneTap.x, twoTap.y);\n    vec2 offset23 = shadowNDCPos.xy + vec2(0.0, twoTap.y);\n    vec2 offset24 = shadowNDCPos.xy + vec2(oneTap.x, twoTap.y);\n    vec2 offset25 = shadowNDCPos.xy + vec2(twoTap.x, twoTap.y);\n    float block1, block2, block3, block4, block5, block6, block7, block8, block9, block10, block11, block12, block13, block14, block15, block16, block17, block18, block19, block20, block21, block22, block23, block24, block25;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset1), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset2), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset3), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset4), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset5), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset6), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset7), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset8), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block9 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset9), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block10 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset10), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block11 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset11), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block12 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset12), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block13 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset13), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block14 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset14), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block15 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset15), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block16 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset16), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block17 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset17), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block18 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset18), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block19 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset19), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block20 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset20), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block21 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset21), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block22 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset22), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block23 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset23), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block24 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset24), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block25 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset25), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, offset1).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, offset2).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, offset3).x);\n      block4 = step(shadowNDCPos.z, texture2D(shadowMap, offset4).x);\n      block5 = step(shadowNDCPos.z, texture2D(shadowMap, offset5).x);\n      block6 = step(shadowNDCPos.z, texture2D(shadowMap, offset6).x);\n      block7 = step(shadowNDCPos.z, texture2D(shadowMap, offset7).x);\n      block8 = step(shadowNDCPos.z, texture2D(shadowMap, offset8).x);\n      block9 = step(shadowNDCPos.z, texture2D(shadowMap, offset9).x);\n      block10 = step(shadowNDCPos.z, texture2D(shadowMap, offset10).x);\n      block11 = step(shadowNDCPos.z, texture2D(shadowMap, offset11).x);\n      block12 = step(shadowNDCPos.z, texture2D(shadowMap, offset12).x);\n      block13 = step(shadowNDCPos.z, texture2D(shadowMap, offset13).x);\n      block14 = step(shadowNDCPos.z, texture2D(shadowMap, offset14).x);\n      block15 = step(shadowNDCPos.z, texture2D(shadowMap, offset15).x);\n      block16 = step(shadowNDCPos.z, texture2D(shadowMap, offset16).x);\n      block17 = step(shadowNDCPos.z, texture2D(shadowMap, offset17).x);\n      block18 = step(shadowNDCPos.z, texture2D(shadowMap, offset18).x);\n      block19 = step(shadowNDCPos.z, texture2D(shadowMap, offset19).x);\n      block20 = step(shadowNDCPos.z, texture2D(shadowMap, offset20).x);\n      block21 = step(shadowNDCPos.z, texture2D(shadowMap, offset21).x);\n      block22 = step(shadowNDCPos.z, texture2D(shadowMap, offset22).x);\n      block23 = step(shadowNDCPos.z, texture2D(shadowMap, offset23).x);\n      block24 = step(shadowNDCPos.z, texture2D(shadowMap, offset24).x);\n      block25 = step(shadowNDCPos.z, texture2D(shadowMap, offset25).x);\n    #endif\n    vec2 coef = fract(shadowNDCPos.xy * shadowMapResolution);\n    vec2 v1X1 = mix(vec2(block1, block6), vec2(block2, block7), coef.xx);\n    vec2 v1X2 = mix(vec2(block2, block7), vec2(block3, block8), coef.xx);\n    vec2 v1X3 = mix(vec2(block3, block8), vec2(block4, block9), coef.xx);\n    vec2 v1X4 = mix(vec2(block4, block9), vec2(block5, block10), coef.xx);\n    float v1 = mix(v1X1.x, v1X1.y, coef.y) + mix(v1X2.x, v1X2.y, coef.y) + mix(v1X3.x, v1X3.y, coef.y) + mix(v1X4.x, v1X4.y, coef.y);\n    vec2 v2X1 = mix(vec2(block6, block11), vec2(block7, block12), coef.xx);\n    vec2 v2X2 = mix(vec2(block7, block12), vec2(block8, block13), coef.xx);\n    vec2 v2X3 = mix(vec2(block8, block13), vec2(block9, block14), coef.xx);\n    vec2 v2X4 = mix(vec2(block9, block14), vec2(block10, block15), coef.xx);\n    float v2 = mix(v2X1.x, v2X1.y, coef.y) + mix(v2X2.x, v2X2.y, coef.y) + mix(v2X3.x, v2X3.y, coef.y) + mix(v2X4.x, v2X4.y, coef.y);\n    vec2 v3X1 = mix(vec2(block11, block16), vec2(block12, block17), coef.xx);\n    vec2 v3X2 = mix(vec2(block12, block17), vec2(block13, block18), coef.xx);\n    vec2 v3X3 = mix(vec2(block13, block18), vec2(block14, block19), coef.xx);\n    vec2 v3X4 = mix(vec2(block14, block19), vec2(block15, block20), coef.xx);\n    float v3 = mix(v3X1.x, v3X1.y, coef.y) + mix(v3X2.x, v3X2.y, coef.y) + mix(v3X3.x, v3X3.y, coef.y) + mix(v3X4.x, v3X4.y, coef.y);\n    vec2 v4X1 = mix(vec2(block16, block21), vec2(block17, block22), coef.xx);\n    vec2 v4X2 = mix(vec2(block17, block22), vec2(block18, block23), coef.xx);\n    vec2 v4X3 = mix(vec2(block18, block23), vec2(block19, block24), coef.xx);\n    vec2 v4X4 = mix(vec2(block19, block24), vec2(block20, block25), coef.xx);\n    float v4 = mix(v4X1.x, v4X1.y, coef.y) + mix(v4X2.x, v4X2.y, coef.y) + mix(v4X3.x, v4X3.y, coef.y) + mix(v4X4.x, v4X4.y, coef.y);\n    float fAvg = (v1 + v2 + v3 + v4) * 0.0625;\n    return fAvg;\n  }\n  bool GetShadowNDCPos(out vec3 shadowNDCPos, vec4 shadowPosWithDepthBias)\n  {\n  \tshadowNDCPos = shadowPosWithDepthBias.xyz / shadowPosWithDepthBias.w * 0.5 + 0.5;\n  \tif (shadowNDCPos.x < 0.0 || shadowNDCPos.x > 1.0 ||\n  \t\tshadowNDCPos.y < 0.0 || shadowNDCPos.y > 1.0 ||\n  \t\tshadowNDCPos.z < 0.0 || shadowNDCPos.z > 1.0) {\n  \t\treturn false;\n  \t}\n  \tshadowNDCPos.xy = cc_cameraPos.w == 1.0 ? vec2(shadowNDCPos.xy.x, 1.0 - shadowNDCPos.xy.y) : shadowNDCPos.xy;\n  \treturn true;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, vec3 matViewDir0, vec3 matViewDir1, vec3 matViewDir2, vec2 projScaleXY)\n  {\n    vec4 newShadowPos = shadowPos;\n    if (normalBias > EPSILON_LOWP)\n    {\n      vec3 viewNormal = vec3(dot(matViewDir0, worldNormal), dot(matViewDir1, worldNormal), dot(matViewDir2, worldNormal));\n      if (viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, mat4 matLightView, vec2 projScaleXY)\n  {\n  \tvec4 newShadowPos = shadowPos;\n  \tif (normalBias > EPSILON_LOWP)\n  \t{\n  \t\tvec4 viewNormal = matLightView * vec4(worldNormal, 0.0);\n  \t\tif (viewNormal.z < 0.1)\n  \t\t\tnewShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n  \t}\n  \treturn newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n  \tvec3 viewSpacePos;\n  \tviewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n  \tviewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n  \tviewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n  \tvec4 clipSpacePos;\n  \tclipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n  \tclipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n  \t#if CC_SHADOWMAP_USE_LINEAR_DEPTH\n  \t\tclipSpacePos.z = GetLinearDepthFromViewSpace(viewSpacePos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n  \t\tclipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n  \t#endif\n  \treturn clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias, float projScaleZ, float projBiasZ)\n  {\n  \tfloat coeffA = projScaleZ;\n  \tfloat coeffB = projBiasZ;\n  \tfloat viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n  \tviewSpacePos_z += viewspaceDepthBias;\n  \tvec4 result = shadowPos;\n  \tresult.z = viewSpacePos_z * coeffA + coeffB;\n  \treturn result;\n  }\n  vec4 ApplyShadowDepthBias_PerspectiveLinearDepth(vec4 shadowPos, float viewspaceDepthBias, vec3 worldPos)\n  {\n    shadowPos.z = CCGetLinearDepth(worldPos, viewspaceDepthBias) * 2.0 - 1.0;\n    shadowPos.z *= shadowPos.w;\n    return shadowPos;\n  }\n  float CCGetDirLightShadowFactorHard (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    float pcf = cc_shadowWHPBInfo.z;\n    vec4 pos = vec4(1.0);\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      pos = ApplyShadowDepthBias_PerspectiveLinearDepth(shadowPos, shadowBias.x, worldPos);\n    #else\n      pos = ApplyShadowDepthBias_Perspective(shadowPos, shadowBias.x);\n    #endif\n    if (pcf > 2.9) {\n      return CCGetSpotLightShadowFactorSoft5X(pos, worldPos);\n    }else if (pcf > 1.9) {\n      return CCGetSpotLightShadowFactorSoft3X(pos, worldPos);\n    }else if (pcf > 0.9) {\n      return CCGetSpotLightShadowFactorSoft(pos, worldPos);\n    }else {\n      return CCGetSpotLightShadowFactorHard(pos, worldPos);\n    }\n  }\n  float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n  {\n    vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y, cc_matLightView, cc_shadowProjInfo.xy);\n    pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n    float realtimeShadow = 1.0;\n    #if CC_DIR_SHADOW_PCF_TYPE == 3\n      realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 2\n      realtimeShadow =  CCGetDirLightShadowFactorSoft3X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 1\n      realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 0\n      realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n    #endif\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      int layer = -1;\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      for (int i = 0; i < 4; i++) {\n        vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n        vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n        if (clipPos.x >= (0.0 + layerThreshold) && clipPos.x <= (1.0 - layerThreshold) &&\n            clipPos.y >= (0.0 + layerThreshold) && clipPos.y <= (1.0 - layerThreshold) &&\n            clipPos.z >= 0.0 && clipPos.z <= 1.0 && layer < 0) {\n          csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n          shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n          shadowProjInfo = cc_csmProjInfo[i];\n          shadowViewDir0 = cc_csmViewDir0[i].xyz;\n          shadowViewDir1 = cc_csmViewDir1[i].xyz;\n          shadowViewDir2 = cc_csmViewDir2[i].xyz;\n          layer = i;\n        }\n      }\n      return layer;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias)\n    {\n      vec4 csmPos = vec4(1.0);\n      vec4 shadowProjDepthInfo, shadowProjInfo;\n      vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n      int level = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n      if (level < 0) { return 1.0; }\n      vec4 pos = ApplyShadowDepthBias_FaceNormal(csmPos, N, shadowBias.y, shadowViewDir0, shadowViewDir1, shadowViewDir2, shadowProjInfo.xy);\n      pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, shadowProjDepthInfo.x, shadowProjDepthInfo.y);\n      float realtimeShadow = 1.0;\n      #if CC_DIR_SHADOW_PCF_TYPE == 3\n        realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 2\n        realtimeShadow = CCGetDirLightShadowFactorSoft3X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 1\n        realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 0\n        realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n      #endif\n      return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n    }\n  #else\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      return -1;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias) {\n      vec4 shadowPos = cc_matLightViewProj * vec4(worldPos, 1.0);\n      return CCShadowFactorBase(shadowPos, N, shadowBias);\n    }\n  #endif\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return texture2DLodEXT(tex, coord, lod);\n      #else\n        return texture2D(tex, coord, lod);\n      #endif\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return textureCubeLodEXT(tex, coord, lod);\n      #else\n        return textureCube(tex, coord, lod);\n      #endif\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * (mipCount - 1.0);\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = textureCube(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    vec3 position, position_fract_part;\n    #else\n    vec3 position;\n    #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  float NL = max(dot(N, L), 0.0);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      if (cc_shadowLPNNInfo.w > 0.0) {\n        #if CC_DIR_LIGHT_SHADOW_TYPE == 2\n          shadow = CCCSMFactorBase(position, N, s.shadowBias);\n        #endif\n      } else {\n        #if CC_DIR_LIGHT_SHADOW_TYPE == 1\n          shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n        #endif\n      }\n    }\n  #endif\n  #if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n    vec3 lightmap = s.lightmap.rgb;\n    #if CC_USE_HDR\n        lightmap.rgb *= cc_exposure.w * cc_exposure.x;\n    #endif\n    vec3 finalColor = diffuse * lightmap.rgb * shadow;\n  #else\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 H = normalize(L + V);\n    float NH = max(dot(N, H), 0.0);\n    vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n    vec3 dirlightContrib = (diffuseContrib + specularContrib);\n    dirlightContrib *= shadow;\n    finalColor *= dirlightContrib;\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = textureCube(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    vec3 rotationDir = RotationVecFromAxisY(R.xyz, cc_surfaceTransform.z, cc_surfaceTransform.w);\n    #if USE_REFLECTION_DENOISE && !CC_IBL_CONVOLUTED\n      vec3 env = GetEnvReflectionWithMipFiltering(rotationDir, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, rotationDir, s.roughness * (cc_ambientGround.w - 1.0));\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = LinearToSRGB(color.rgb);\n  return color;\n}\nvarying highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n#endif\nbool GetMetallicAlbedoFromDiffuseSpecularWithoutColor(out float metallic, out vec3 albedo, vec3 diffuse, vec3 specular, float f0 )\n{\n\tfloat d = max(max(diffuse.x, diffuse.y), diffuse.z);\n\tvec3 normalizedColor = diffuse / (d + (d < EPSILON_LOWP ? EPSILON_LOWP : 0.0));\n\tnormalizedColor = d < EPSILON_LOWP ? specular : normalizedColor;\n\tfloat s = max(max(specular.x, specular.y), specular.z);\n\tfloat delta = (d + s) * (d + s)  - 4.0 * f0 * d;\n\tfloat deltaSqrt = sqrt(max(0.0, delta));\n\tfloat solverMetallic = (-d - s + 2.0 * f0 + deltaSqrt) / (2.0 * f0);\n\tvec3 solverAlbedo = (d + s) * normalizedColor - vec3(f0 * (1.0 - solverMetallic));\n\tbool isValidSolver = delta >= 0.0;\n\tmetallic = isValidSolver ? clamp(solverMetallic, 0.0, 1.0) : 0.0;\n\talbedo = isValidSolver ? vec3(max(0.0, solverAlbedo.x), max(0.0, solverAlbedo.y), max(0.0, solverAlbedo.z)) : diffuse;\n\treturn isValidSolver;\n}\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#define DCC_APP_OTHERS 0\n#define DCC_APP_MAX 1\n#define DCC_APP_BLENDER 2\n#define DCC_APP_CINEMA4D 3\n#define DCC_APP_GLTF 4\n#define DCC_APP_MAYA 5\n#if USE_SHININESS_MAP\n  uniform sampler2D shininessExponentMap;\n#endif\n#if USE_SPECULAR_GLOSSINESS_MAP\n  uniform sampler2D specularGlossinessMap;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n #if USE_METALLIC_MAP\n  uniform sampler2D metallicMap;\n#endif\n#if USE_VERTEX_COLOR\n  varying vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_EMISSIVESCALE_MAP\n  uniform sampler2D emissiveScaleMap;\n#endif\nfloat discolor(vec3 srcColor) {\n  return dot(GRAY_VECTOR, srcColor);\n}\nfloat convertShininessExponent(float shininessExp)\n{\n  #if DCC_APP_NAME == DCC_APP_BLENDER\n    float glossiness = clamp(sqrt(shininessExp) * 0.1, 0.0, 0.95);\n  #elif DCC_APP_NAME == DCC_APP_MAX || DCC_APP_NAME == DCC_APP_MAYA\n    float l2 = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n    float glossiness = pow(l2, 0.5);\n  #else\n    float glossiness = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n  #endif\n    return glossiness;\n}\nfloat getSpecularIntensityFromRoughness(float roughness)\n{\n  #if DCC_APP_NAME == DCC_APP_BLENDER\n    float specularIntensityMultiplier = mix(1.0, 5.0, roughness);\n  #elif DCC_APP_NAME == DCC_APP_CINEMA4D\n    float specularIntensityMultiplier = mix(1.0, 50.0, roughness);\n  #elif DCC_APP_NAME == DCC_APP_MAX || DCC_APP_NAME == DCC_APP_MAYA\n    float specularIntensityMultiplier = mix(1.0, 20.0, roughness);\n  #else\n    float specularIntensityMultiplier = 1.0;\n  #endif\n    return specularIntensityMultiplier;\n}\nvec4 getSpecularColorAndFactor()\n{\n  vec3 inSpecular = specularColor.rgb * specularFactor;\n  float inFactor = 1.0;\n  #if USE_SPECULAR_GLOSSINESS_MAP\n    inSpecular = SRGBToLinear(texture2D(specularGlossinessMap, TEXTURE_UV).rgb);\n  #endif\n  #if USE_SPECULAR_MAP\n      vec4 specularTex = texture2D(specularMap, TEXTURE_UV);\n      specularTex.rgb = SRGBToLinear(specularTex.rgb);\n      inSpecular = specularTex.rgb;\n  #endif\n  return vec4(inSpecular, inFactor);\n}\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = vec4(1.0);\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, TEXTURE_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    texColor.a *= transparencyFactor;\n    baseColor *= texColor;\n  #else\n    baseColor *= diffuseColor;\n  #endif\n  baseColor.rgb *= diffuseFactor;\n  #if USE_TRANSPARENCY_MAP\n    baseColor.a = texture2D(transparencyMap, TEXTURE_UV).TRANSPARENCY_MAP_CHANNEL;\n    #if DCC_APP_NAME == DCC_APP_MAYA\n      baseColor.a = 1.0 - baseColor.a;\n    #endif\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.a < alphaThreshold) discard;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  vec4 specularColorAndFactor = getSpecularColorAndFactor();\n  float inGlossiness = 0.0, inSpecularIntensity = 1.0;\n  #if HAS_EXPORTED_GLOSSINESS\n    #if USE_SPECULAR_GLOSSINESS_MAP\n      inGlossiness = 1.0 - texture2D(specularGlossinessMap, TEXTURE_UV).a;\n    #else\n      inGlossiness = glossiness;\n    #endif\n  #else\n    #if USE_SHININESS_MAP\n      #if USE_SHININESS_MAP_CHANNEL\n        inGlossiness = 1.0 - texture2D(shininessExponentMap, TEXTURE_UV).SHININESS_MAP_CHANNEL;\n      #else\n        inGlossiness = 1.0 - discolor(texture2D(shininessExponentMap, TEXTURE_UV).rgb);\n      #endif\n    #else\n      inGlossiness = convertShininessExponent(shininessExponent);\n    #endif\n    inSpecularIntensity *= getSpecularIntensityFromRoughness(1.0 - inGlossiness);\n  #endif\n  float inMetallic = 0.0;\n  vec4 albedo = baseColor;\n  #if HAS_EXPORTED_METALLIC\n    inMetallic = metallic;\n    float spec = specularFactor;\n    #if USE_SPECULAR_MAP\n      spec = dot(GRAY_VECTOR, texture2D(specularMap, TEXTURE_UV).rgb);\n    #endif\n    inSpecularIntensity *= spec * 0.5;\n  #else\n    GetMetallicAlbedoFromDiffuseSpecularWithoutColor(inMetallic, albedo.rgb, baseColor.rgb, specularColorAndFactor.rgb, 0.04);\n    inSpecularIntensity *= inMetallic;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, TEXTURE_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * normalScale) * normalize(v_tangent) +\n      (nmmp.y * normalScale) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    packHighpData(s.position, s.position_fract_part, v_position);\n    #else\n    s.position = v_position;\n    #endif\n  s.albedo = albedo;\n  s.occlusion = 1.0;\n  s.roughness = 1.0 - inGlossiness;\n  s.metallic = inMetallic;\n  s.specularIntensity = inSpecularIntensity * 0.5;\n  vec3 emissiveColor = emissive.rgb;\n  #if USE_EMISSIVE_MAP\n      emissiveColor.rgb = SRGBToLinear(texture2D(emissiveMap, TEXTURE_UV).rgb);\n  #endif\n  #if USE_EMISSIVESCALE_MAP\n      vec4 emissiveScaleColor = texture2D(emissiveScaleMap, TEXTURE_UV);\n      emissiveScaleColor.rgb = SRGBToLinear(emissiveScaleColor.rgb);\n      emissiveColor.rgb *= emissiveScaleColor.rgb;\n  #else\n      emissiveColor.rgb *= emissiveScale;\n  #endif\n  s.emissive = emissiveColor.rgb;\n  #if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n    vec4 lightColor = texture2D(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.xyz * v_luv.z;\n    s.lightmap_test = v_luv.z;\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW  && CC_SHADOW_TYPE == 2\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCFragOutput(CCStandardShadingBase(s, v_shadowPos));\n    #if CC_USE_FOG != 4\n      CC_APPLY_FOG(color, s.position.xyz);\n    #endif\n    gl_FragData[0] = color;\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  void main () {\n    StandardSurface s; surf(s);\n    gl_FragData[0] = s.albedo;\n    gl_FragData[1] = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    gl_FragData[2] = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_environment","defines":["CC_USE_IBL"]},{"name":"cc_diffuseMap","defines":["CC_USE_DIFFUSEMAP"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","defines":["!USE_INSTANCING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"cc_lightingMap","defines":["CC_USE_LIGHTMAP","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":142,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":114}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_USE_FOG","type":"number","range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"USE_VERTEX_COLOR","type":"boolean"},{"name":"USE_NORMAL_MAP","type":"boolean"},{"name":"HAS_SECOND_UV","type":"boolean"},{"name":"CC_FORWARD_ADD","type":"boolean"},{"name":"USE_TWOSIDE","type":"boolean"},{"name":"CC_USE_DEBUG_VIEW","type":"number","range":[0,3]},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]},{"name":"CC_SHADOWMAP_USE_LINEAR_DEPTH","type":"boolean"},{"name":"CC_DIR_SHADOW_PCF_TYPE","type":"number","range":[0,3]},{"name":"CC_USE_IBL","type":"number","range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","range":[0,2]},{"name":"USE_REFLECTION_DENOISE","type":"boolean"},{"name":"CC_SHADOW_TYPE","type":"number","range":[0,3]},{"name":"CC_DIR_LIGHT_SHADOW_TYPE","type":"number","range":[0,3]},{"name":"CC_USE_HDR","type":"boolean"},{"name":"CC_IBL_CONVOLUTED","type":"boolean"},{"name":"TEXTURE_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"DCC_APP_NAME","type":"number","range":[0,5]},{"name":"USE_SHININESS_MAP","type":"boolean"},{"name":"SHININESS_MAP_CHANNEL","type":"string","options":["a","r","g","b"]},{"name":"USE_SPECULAR_GLOSSINESS_MAP","type":"boolean"},{"name":"USE_SPECULAR_MAP","type":"boolean"},{"name":"USE_METALLIC_MAP","type":"boolean"},{"name":"USE_ALBEDO_MAP","type":"boolean"},{"name":"USE_TRANSPARENCY_MAP","type":"boolean"},{"name":"TRANSPARENCY_MAP_CHANNEL","type":"string","options":["a","r","g","b"]},{"name":"USE_EMISSIVE_MAP","type":"boolean"},{"name":"USE_EMISSIVESCALE_MAP","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"HAS_EXPORTED_GLOSSINESS","type":"boolean"},{"name":"USE_SHININESS_MAP_CHANNEL","type":"boolean"},{"name":"HAS_EXPORTED_METALLIC","type":"boolean"},{"name":"CC_PIPELINE_TYPE","type":"number","range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean"}]},{"hash":2373376484,"name":"dcc/imported-specular-glossiness|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"diffuseColor","type":16,"count":1},{"name":"specularColor","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScale","type":13,"count":1},{"name":"alphaThreshold","type":13,"count":1},{"name":"shininessExponent","type":13,"count":1},{"name":"glossiness","type":13,"count":1},{"name":"metallic","type":13,"count":1},{"name":"normalScale","type":13,"count":1},{"name":"transparencyFactor","type":13,"count":1},{"name":"diffuseFactor","type":13,"count":1},{"name":"specularFactor","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"transparencyMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_TRANSPARENCY_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_vertexId","format":11,"location":12,"defines":["CC_USE_MORPH"]},{"name":"a_texCoord1","format":21,"location":13,"defines":[]},{"name":"a_color","format":44,"location":14,"defines":["USE_VERTEX_COLOR"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n  };\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4  tilingOffset;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float emissiveScale;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\nout vec2 v_uv;\nout vec2 v_uv1;\nout vec4 v_worldPos;\nout highp vec2 v_clip_depth;\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out lowp vec4 v_color;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  v_clip_depth = clipPos.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4  tilingOffset;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float emissiveScale;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  layout(std140) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n    mediump vec4 cc_debug_view_mode;\n    mediump vec4 cc_debug_view_composite_pack_1;\n    mediump vec4 cc_debug_view_composite_pack_2;\n    mediump vec4 cc_debug_view_composite_pack_3;\n  };\n  layout(std140) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_surfaceTransform;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec4 v_worldPos;\nin highp vec2 v_clip_depth;\n#define DCC_APP_OTHERS 0\n#define DCC_APP_MAX 1\n#define DCC_APP_BLENDER 2\n#define DCC_APP_CINEMA4D 3\n#define DCC_APP_GLTF 4\n#define DCC_APP_MAYA 5\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\n#if USE_VERTEX_COLOR\n  in lowp vec4 v_color;\n#endif\nvec4 frag () {\n  #if USE_ALPHA_TEST\n    float alpha = diffuseColor.a;\n    #if USE_VERTEX_COLOR\n      alpha *= v_color.a;\n    #endif\n    #if USE_ALBEDO_MAP\n      alpha *= texture(albedoMap, TEXTURE_UV).a * transparencyFactor;\n    #endif\n    #if USE_TRANSPARENCY_MAP\n      alpha = texture(transparencyMap, TEXTURE_UV).TRANSPARENCY_MAP_CHANNEL;\n      #if DCC_APP_NAME == DCC_APP_MAYA\n        alpha = 1.0 - alpha;\n      #endif\n    #endif\n    if (alpha < alphaThreshold) discard;\n  #endif\n  highp float clipDepth = v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5;\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      clipDepth = CCGetLinearDepth(v_worldPos.xyz);\n    #endif\n  }\n  #if CC_SHADOWMAP_FORMAT == 1\n    return packDepthToRGBA(clipDepth);\n  #else\n    return vec4(clipDepth, 1.0, 1.0, 1.0);\n  #endif\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying highp vec2 v_clip_depth;\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying lowp vec4 v_color;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  v_clip_depth = clipPos.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 diffuseColor;\n   uniform float alphaThreshold;\n   uniform float transparencyFactor;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying highp vec2 v_clip_depth;\n#define DCC_APP_OTHERS 0\n#define DCC_APP_MAX 1\n#define DCC_APP_BLENDER 2\n#define DCC_APP_CINEMA4D 3\n#define DCC_APP_GLTF 4\n#define DCC_APP_MAYA 5\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\n#if USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\nvec4 frag () {\n  #if USE_ALPHA_TEST\n    float alpha = diffuseColor.a;\n    #if USE_VERTEX_COLOR\n      alpha *= v_color.a;\n    #endif\n    #if USE_ALBEDO_MAP\n      alpha *= texture2D(albedoMap, TEXTURE_UV).a * transparencyFactor;\n    #endif\n    #if USE_TRANSPARENCY_MAP\n      alpha = texture2D(transparencyMap, TEXTURE_UV).TRANSPARENCY_MAP_CHANNEL;\n      #if DCC_APP_NAME == DCC_APP_MAYA\n        alpha = 1.0 - alpha;\n      #endif\n    #endif\n    if (alpha < alphaThreshold) discard;\n  #endif\n  highp float clipDepth = v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5;\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      clipDepth = CCGetLinearDepth(v_worldPos.xyz);\n    #endif\n  }\n  #if CC_SHADOWMAP_FORMAT == 1\n    return packDepthToRGBA(clipDepth);\n  #else\n    return vec4(clipDepth, 1.0, 1.0, 1.0);\n  #endif\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]},{"name":"CCGlobal","defines":["CC_RECEIVE_SHADOW"]},{"name":"CCCamera","defines":["CC_RECEIVE_SHADOW"]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","defines":["!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":57,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":114}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"HAS_SECOND_UV","type":"boolean"},{"name":"USE_VERTEX_COLOR","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"TEXTURE_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"DCC_APP_NAME","type":"number","range":[0,5]},{"name":"USE_ALBEDO_MAP","type":"boolean"},{"name":"USE_TRANSPARENCY_MAP","type":"boolean"},{"name":"TRANSPARENCY_MAP_CHANNEL","type":"string","options":["a","r","g","b"]},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"CC_SHADOWMAP_USE_LINEAR_DEPTH","type":"boolean"},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]}]}],[{"name":"opaque","passes":[{"program":"dcc/imported-specular-glossiness|standard-vs|standard-fs","properties":{"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1]},"emissiveMap":{"value":"grey","type":28},"emissiveScale":{"type":13,"value":[1]},"emissiveScaleMap":{"value":"grey","type":28},"shininessExponentMap":{"value":"grey","type":28},"shininessExponent":{"type":13,"value":[100]},"specularGlossinessMap":{"value":"grey","type":28},"specularColor":{"linear":true,"type":16,"value":[0,0,0,0]},"specularMap":{"value":"grey","type":28},"specularFactor":{"type":13,"value":[1]},"transparencyMap":{"value":"grey","type":28},"transparencyFactor":{"type":13,"value":[1]},"tilingOffset":{"type":16,"value":[1,1,0,0]},"normalStrength":{"type":13,"value":[1],"handleInfo":["normalScale",0,13]},"normalMap":{"value":"normal","type":28},"glossiness":{"type":13,"value":[0]},"metallic":{"type":13,"value":[0]},"metallicMap":{"value":"grey","type":28},"albedoMap":{"type":28,"value":"grey"},"diffuseColor":{"type":16,"value":[1,1,1,1]},"diffuseFactor":{"type":13,"value":[1]},"normalScale":{"type":13,"value":[1]}}},{"phase":"forward-add","propertyIndex":0,"program":"dcc/imported-specular-glossiness|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"dcc/imported-specular-glossiness|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"transparencyMap":{"value":"grey","type":28},"transparencyFactor":{"type":13,"value":[1]},"diffuseColor":{"type":16,"value":[1,1,1,1]},"diffuseFactor":{"type":13,"value":[1]},"albedoMap":{"type":28,"value":"grey"}}}]},{"name":"transparent","passes":[{"program":"dcc/imported-specular-glossiness|standard-vs|standard-fs","embeddedMacros":{"CC_FORCE_FORWARD_SHADING":true},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1]},"emissiveMap":{"value":"grey","type":28},"emissiveScale":{"type":13,"value":[1]},"emissiveScaleMap":{"value":"grey","type":28},"shininessExponentMap":{"value":"grey","type":28},"shininessExponent":{"type":13,"value":[100]},"specularGlossinessMap":{"value":"grey","type":28},"specularColor":{"linear":true,"type":16,"value":[0,0,0,0]},"specularMap":{"value":"grey","type":28},"specularFactor":{"type":13,"value":[1]},"transparencyMap":{"value":"grey","type":28},"transparencyFactor":{"type":13,"value":[1]},"tilingOffset":{"type":16,"value":[1,1,0,0]},"normalStrength":{"type":13,"value":[1],"handleInfo":["normalScale",0,13]},"normalMap":{"value":"normal","type":28},"glossiness":{"type":13,"value":[0]},"metallic":{"type":13,"value":[0]},"metallicMap":{"value":"grey","type":28},"albedoMap":{"type":28,"value":"grey"},"diffuseColor":{"type":16,"value":[1,1,1,1]},"diffuseFactor":{"type":13,"value":[1]},"normalScale":{"type":13,"value":[1]}}},{"phase":"forward-add","propertyIndex":0,"program":"dcc/imported-specular-glossiness|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"dcc/imported-specular-glossiness|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"transparencyMap":{"value":"grey","type":28},"transparencyFactor":{"type":13,"value":[1]},"diffuseColor":{"type":16,"value":[1,1,1,1]},"diffuseFactor":{"type":13,"value":[1]},"albedoMap":{"type":28,"value":"grey"}}}]}]]],0,0,[],[],[]],[[{"base":"2,2,0,0,2,0","rgbe":false,"mipmaps":[{"front":"f8b65399-e0bd-489b-853b-f82fe0e6772f@b47c0@e9a6d","back":"f8b65399-e0bd-489b-853b-f82fe0e6772f@b47c0@40c10","left":"f8b65399-e0bd-489b-853b-f82fe0e6772f@b47c0@8fd34","right":"f8b65399-e0bd-489b-853b-f82fe0e6772f@b47c0@74afd","top":"f8b65399-e0bd-489b-853b-f82fe0e6772f@b47c0@bb97f","bottom":"f8b65399-e0bd-489b-853b-f82fe0e6772f@b47c0@7d38f"}]}],[9],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]]]]
